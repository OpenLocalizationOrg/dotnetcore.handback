<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="markdown" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" /></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.</source>
          <target state="new">$x$x$Xxxxxxxx xx xxxxxxxx xxxxxxxxx xxx xxxxxxxxx xxx xxxxxxxxx xx XxxxxxxXxxxxxxxxx xxxx xxxxx xx xxxx xx XxxxXxxx xxx Xxxxxxxxx xxxxxxxxxxxxx.</target>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You should not use this API.</source>
          <target state="new">Xxx xxxxxx xxx xxx xxxx XXX.</target>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It is only public due to DLL refactoring and exists only for internal performance optimizations.&lt;/p&gt;\n</source>
          <target state="new">Xx xx xxxx xxxxxx xxx xx XXX xxxxxxxxxxx xxx xxxxxx xxxx xxx xxxxxxxx xxxxxxxxxxx xxxxxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression’s polymorhphic inline cache.</source>
          <target state="new">$x$x$Xxxx xxx xxxxxxxx xxxx xxxx xx xxx XxxxXxxx$ xxxxx xx xxx xxxx xx xxx xxxxx xxxx xx xxx xxxxxxx xxxxxxxxxx$x xxxxxxxxxxxx xxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type used by the CallSite.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxx xxxx xx xxx XxxxXxxx.$$x$$x</target>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx XxxxXxxx xxx xxxxxxx xxx XxxxXxxx xxx xxx XxxxxxxXxxxxxxxxx$x xxxxxxxxxxx xxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You should not use this type.</source>
          <target state="new">Xxx xxxxxx xxx xxx xxxx xxxx.</target>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.&lt;/p&gt;\n</source>
          <target state="new">Xx xx xxxx xxxxxx xxx xx xxxxxxxx xxxxxxxxxxx$ xxx xx xx xxxx xxxxxxxxxx xxx xxxxxxxxxxx xxxxxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The CallSite for the DynamicExpression’s polymorphic inline cache.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx XxxxXxxx xxx xxx XxxxxxxXxxxxxxxxx$x xxxxxxxxxxx xxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Rewrites this node replacing the dynamic expression’s arguments with the provided values.</source>
          <target state="new">$x$x$Xxxxxxxx xxxx xxxx xxxxxxxxx xxx xxxxxxx xxxxxxxxxx$x xxxxxxxxx xxxx xxx xxxxxxxx xxxxxx.</target>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;args&lt;/code&gt; needs to match the number of the current expression.</source>
          <target state="new">Xxx xxxxxx xx $xxxx$xxxx$$xxxx$ xxxxx xx xxxxx xxx xxxxxx xx xxx xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You should not use this type.</source>
          <target state="new">Xxx xxxxxx xxx xxx xxxx xxxx.</target>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is only public due to assembly refactoring, and it is used internally for performance optimizations.</source>
          <target state="new">Xx xx xxxx xxxxxx xxx xx xxxxxxxx xxxxxxxxxxx$ xxx xx xx xxxx xxxxxxxxxx xxx xxxxxxxxxxx xxxxxxxxxxxxx.</target>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.&lt;/p&gt;\n</source>
          <target state="new">Xxxx xxxxxx xxxxxx xxxxxx xx$xxxxxxx xx xxxxx xx xx xxxxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxxxxxx xxxxx xxxxxxxx xxxx XxxxxxxXxxxxxxxxx xxxx xx xxxxx xxxx xx xxx xxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The arguments used to replace this node.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxxx xxxx xx xxxxxxx xxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The rewritten node, but if no changes were made, then returns the same node.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxxx xxxx$ xxx xx xx xxxxxxx xxxx xxxx$ xxxx xxxxxxx xxx xxxx xxxx.$$x$$x</target>
        </trans-unit></group></body></file></xliff>