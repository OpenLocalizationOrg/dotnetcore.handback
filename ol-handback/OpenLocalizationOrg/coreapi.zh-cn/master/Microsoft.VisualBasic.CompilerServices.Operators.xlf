<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="markdown" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" /></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic addition (+) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic &lt;strong&gt;And&lt;/strong&gt; operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx $xxxxxx$Xxx$$xxxxxx$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;True&lt;/strong&gt; if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to &lt;strong&gt;True&lt;/strong&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.</source>
          <target state="new">$x$x$Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xxxxxxxxxx$ $xxxxxx$Xxxx$$xxxxxx$ xx xxxx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$ xxxxxxxx xx $xxxxxx$Xxxx$$xxxxxx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.</target>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For bitwise operations, 1 if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to 1; otherwise, 0.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx$ 0 xx xxxx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$ xxxxxxxx xx 0$ xxxxxxxxx$ 0.$$x$$x</target>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic equal (=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$ xxx xxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic greater-than (&gt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxx$xxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is greater than &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xx xxxxxxx xxxx $xx$Xxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic greater-than or equal-to (&gt;=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxx$xxxx xx xxxxx$xx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is greater than or equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xx xxxxxxx xxxx xx xxxxx xx $xx$Xxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic less-than (&lt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxx$xxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is less than &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xx xxxx xxxx $xx$Xxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic less-than or equal-to (&lt;=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxx$xxxx xx xxxxx$xx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is less than or equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xx xxxx xxxx xx xxxxx xx $xx$Xxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic not-equal (&lt;&gt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxx$xxxxx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;True&lt;/strong&gt; if &lt;em&gt;Left&lt;/em&gt; is not equal to &lt;em&gt;Right&lt;/em&gt;; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$Xxxx$$xxxxxx$ xx $xx$Xxxx$$xx$ xx xxx xxxxx xx $xx$Xxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Performs binary or text string comparison when given two strings.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxxxxx xx xxxx xxxxxx xxxxxxxxxx xxxx xxxxx xxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;String&lt;/strong&gt; expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxx$$xxxxxx$ xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;String&lt;/strong&gt; expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxx$$xxxxxx$ xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Value &lt;/p&gt;\n&lt;p&gt;Condition &lt;/p&gt;\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\n&lt;p&gt;-1 &lt;/p&gt;\n&lt;/td&gt;&lt;td&gt;\n&lt;p&gt;\n&lt;em&gt;Left&lt;/em&gt; is less than &lt;em&gt;Right&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxxxx $$x$$x$x$Xxxxxxxxx $$x$$x$xxxxx$$xxxxx$$xx$$xx$$x$x$$0 $$x$$x$$xx$$xx$$x$x$$x$xx$Xxxx$$xx$ xx xxxx xxxx $xx$Xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\n&lt;p&gt;0&lt;/p&gt;\n&lt;/td&gt;&lt;td&gt;\n&lt;p&gt;\n&lt;em&gt;Left&lt;/em&gt; is equal to &lt;em&gt;Right&lt;/em&gt;.</source>
          <target state="new">$$x$$x$$xx$$$xx$$xx$$xx$$x$x$0$$x$$x$$xx$$xx$$x$x$$x$xx$Xxxx$$xx$ xx xxxxx xx $xx$Xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\n&lt;p&gt;1 &lt;/p&gt;\n&lt;/td&gt;&lt;td&gt;\n&lt;p&gt;\n&lt;em&gt;Left&lt;/em&gt; is greater than &lt;em&gt;Right&lt;/em&gt;.</source>
          <target state="new">$$x$$x$$xx$$$xx$$xx$$xx$$x$x$0 $$x$$x$$xx$$xx$$x$x$$x$xx$Xxxx$$xx$ xx xxxxxxx xxxx $xx$Xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\n</source>
          <target state="new">$$x$$x$$xx$$$xx$$$xxxxx$$$xxxxx$$x</target>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic concatenation (&amp;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A string representing the concatenation of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxx xxxxxxxxxxxx xxx xxxxxxxxxxxxx xx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic equals (=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded equals operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxxxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic greater-than (&gt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxxxxxx$xxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded greater-than operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxxxxxx$xxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic greater-than or equal-to (&gt;=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxxxxxx$xxxx xx xxxxx$xx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded greater-than or equal-to operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxxxxxx$xxxx xx xxxxx$xx xxxxxxxx.</target>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic less-than (&lt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxxx$xxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded less-than operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxxx$xxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic less-than or equal-to (&lt;=) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxxx$xxxx xx xxxxx$xx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded less-than or equal-to operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxxx$xxxx xx xxxxx$xx xxxxxxxx.</target>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the overloaded Visual Basic not-equal (&lt;&gt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxxxx Xxxxxx Xxxxx xxx$xxxxx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Any expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;True&lt;/strong&gt; to perform a case-insensitive string comparison; otherwise, &lt;strong&gt;False&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxx$$xxxxxx$ xx xxxxxxx x xxxx$xxxxxxxxxxx xxxxxx xxxxxxxxxx$ xxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the overloaded not-equal operator.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxx xxxxxxxxxx xxx$xxxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;False&lt;/strong&gt; if operator overloading is not supported.&lt;/p&gt;\n</source>
          <target state="new">$xxxxxx$Xxxxx$$xxxxxx$ xx xxxxxxxx xxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic division (/) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The full quotient of &lt;em&gt;Left&lt;/em&gt; divided by &lt;em&gt;Right&lt;/em&gt;, including any remainder.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xxxxxxxx xx $xx$Xxxx$$xx$ xxxxxxx xx $xx$Xxxxx$$xx$$ xxxxxxxxx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic exponent (^) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of &lt;em&gt;Left&lt;/em&gt; raised to the power of &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx $xx$Xxxx$$xx$ xxxxxx xx xxx xxxxx xx $xx$Xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The integer quotient of &lt;em&gt;Left&lt;/em&gt; divided by &lt;em&gt;Right&lt;/em&gt;, which discards any remainder and retains only the integer portion.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxxxx xx $xx$Xxxx$$xx$ xxxxxxx xx $xx$Xxxxx$$xx$$ xxxxx xxxxxxxx xxx xxxxxxxxx xxx xxxxxxx xxxx xxx xxxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic arithmetic left shift (&lt;&lt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxxxx xxxx xxxxx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Integral numeric expression.</source>
          <target state="new">Xxxxxxxx xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The bit pattern to be shifted.</source>
          <target state="new">Xxx xxx xxxxxxx xx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The data type must be an integral type (&lt;strong&gt;SByte&lt;/strong&gt;, &lt;strong&gt;Byte&lt;/strong&gt;, &lt;strong&gt;Short&lt;/strong&gt;, &lt;strong&gt;UShort&lt;/strong&gt;, &lt;strong&gt;Integer&lt;/strong&gt;, &lt;strong&gt;UInteger&lt;/strong&gt;, &lt;strong&gt;Long&lt;/strong&gt;, or &lt;strong&gt;ULong&lt;/strong&gt;).&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xxxx xx xx xxxxxxxx xxxx $$xxxxxx$XXxxx$$xxxxxx$$ $xxxxxx$Xxxx$$xxxxxx$$ $xxxxxx$Xxxxx$$xxxxxx$$ $xxxxxx$XXxxxx$$xxxxxx$$ $xxxxxx$Xxxxxxx$$xxxxxx$$ $xxxxxx$XXxxxxxx$$xxxxxx$$ $xxxxxx$Xxxx$$xxxxxx$$ xx $xxxxxx$XXxxx$$xxxxxx$$.$$x$$x</target>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Numeric expression.</source>
          <target state="new">Xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The number of bits to shift the bit pattern.</source>
          <target state="new">Xxx xxxxxx xx xxxx xx xxxxx xxx xxx xxxxxxx.</target>
        </trans-unit><trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The data type must be &lt;strong&gt;Integer&lt;/strong&gt; or widen to &lt;strong&gt;Integer&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xxxx xx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxx xx $xxxxxx$Xxxxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="259" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An integral numeric value.</source>
          <target state="new">$x$x$Xx xxxxxxxx xxxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The result of shifting the bit pattern.</source>
          <target state="new">Xxx xxxxxx xx xxxxxxxx xxx xxx xxxxxxx.</target>
        </trans-unit><trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The data type is the same as that of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xx xxx xxxx xx xxxx xx $xx$Xxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="262" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic &lt;strong&gt;Mod&lt;/strong&gt; operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx $xxxxxx$Xxx$$xxxxxx$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="263" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="265" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="267" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The remainder after &lt;em&gt;Left&lt;/em&gt; is divided by &lt;em&gt;Right&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxxxxx xxxxx $xx$Xxxx$$xx$ xx xxxxxxx xx $xx$Xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="268" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="269" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic multiply (*) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="270" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="272" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="274" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The product of &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="275" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic unary minus (–) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxx xxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="276" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="278" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The negative value of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xx $xx$Xxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="279" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic &lt;strong&gt;Not&lt;/strong&gt; operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx $xxxxxx$Xxx$$xxxxxx$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="280" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="282" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;False&lt;/strong&gt; if &lt;em&gt;Operand&lt;/em&gt; is &lt;strong&gt;True&lt;/strong&gt;; otherwise, &lt;strong&gt;True&lt;/strong&gt;.</source>
          <target state="new">$x$x$Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xxxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$ xx $xx$Xxxxxxx$$xx$ xx $xxxxxx$Xxxx$$xxxxxx$$ xxxxxxxxx$ $xxxxxx$Xxxx$$xxxxxx$.</target>
        </trans-unit><trans-unit id="283" translate="yes" xml:space="preserve">
          <source>For bitwise operations, 1 if &lt;em&gt;Operand&lt;/em&gt; is 0; otherwise, 0.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx$ 0 xx $xx$Xxxxxxx$$xx$ xx 0$ xxxxxxxxx$ 0.$$x$$x</target>
        </trans-unit><trans-unit id="284" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic &lt;strong&gt;Or&lt;/strong&gt; operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx $xxxxxx$Xx$$xxxxxx$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="285" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="287" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="289" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;For &lt;strong&gt;Boolean&lt;/strong&gt; operations, &lt;strong&gt;False&lt;/strong&gt; if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to &lt;strong&gt;False&lt;/strong&gt;; otherwise, &lt;strong&gt;True&lt;/strong&gt;.</source>
          <target state="new">$x$x$Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xxxxxxxxxx$ $xxxxxx$Xxxxx$$xxxxxx$ xx xxxx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$ xxxxxxxx xx $xxxxxx$Xxxxx$$xxxxxx$$ xxxxxxxxx$ $xxxxxx$Xxxx$$xxxxxx$.</target>
        </trans-unit><trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For bitwise operations, 0 if both &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt; evaluate to 0; otherwise, 1.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx$ 0 xx xxxx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$ xxxxxxxx xx 0$ xxxxxxxxx$ 0.$$x$$x</target>
        </trans-unit><trans-unit id="291" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic unary plus (+) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxx xxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="292" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="294" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of &lt;em&gt;Operand&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxx xx $xx$Xxxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="295" translate="yes" xml:space="preserve">
          <source>(The sign of the &lt;em&gt;Operand&lt;/em&gt; is unchanged.)&lt;/p&gt;\n</source>
          <target state="new">$Xxx xxxx xx xxx $xx$Xxxxxxx$$xx$ xx xxxxxxxxx.$$$x$$x</target>
        </trans-unit><trans-unit id="296" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic arithmetic right shift (&gt;&gt;) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxxxx xxxxx xxxxx $$$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="297" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Integral numeric expression.</source>
          <target state="new">Xxxxxxxx xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The bit pattern to be shifted.</source>
          <target state="new">Xxx xxx xxxxxxx xx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The data type must be an integral type (&lt;strong&gt;SByte&lt;/strong&gt;, &lt;strong&gt;Byte&lt;/strong&gt;, &lt;strong&gt;Short&lt;/strong&gt;, &lt;strong&gt;UShort&lt;/strong&gt;, &lt;strong&gt;Integer&lt;/strong&gt;, &lt;strong&gt;UInteger&lt;/strong&gt;, &lt;strong&gt;Long&lt;/strong&gt;, or &lt;strong&gt;ULong&lt;/strong&gt;).&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xxxx xx xx xxxxxxxx xxxx $$xxxxxx$XXxxx$$xxxxxx$$ $xxxxxx$Xxxx$$xxxxxx$$ $xxxxxx$Xxxxx$$xxxxxx$$ $xxxxxx$XXxxxx$$xxxxxx$$ $xxxxxx$Xxxxxxx$$xxxxxx$$ $xxxxxx$XXxxxxxx$$xxxxxx$$ $xxxxxx$Xxxx$$xxxxxx$$ xx $xxxxxx$XXxxx$$xxxxxx$$.$$x$$x</target>
        </trans-unit><trans-unit id="301" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Numeric expression.</source>
          <target state="new">Xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The number of bits to shift the bit pattern.</source>
          <target state="new">Xxx xxxxxx xx xxxx xx xxxxx xxx xxx xxxxxxx.</target>
        </trans-unit><trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The data type must be &lt;strong&gt;Integer&lt;/strong&gt; or widen to &lt;strong&gt;Integer&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xxxx xx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxx xx $xxxxxx$Xxxxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="305" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An integral numeric value.</source>
          <target state="new">$x$x$Xx xxxxxxxx xxxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The result of shifting the bit pattern.</source>
          <target state="new">Xxx xxxxxx xx xxxxxxxx xxx xxx xxxxxxx.</target>
        </trans-unit><trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The data type is the same as that of &lt;em&gt;Operand&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxx xx xxx xxxx xx xxxx xx $xx$Xxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="308" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic subtraction (–) operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx xxxxxxxxxxx $$$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="309" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Any numeric expression.</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.</target>
        </trans-unit><trans-unit id="311" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="312" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Any numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="314" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The difference between &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxxxx xxxxxxx $xx$Xxxx$$xx$ xxx $xx$Xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="315" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents the Visual Basic &lt;strong&gt;Xor&lt;/strong&gt; operator.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx Xxxxxx Xxxxx $xxxxxx$Xxx$$xxxxxx$ xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="316" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="318" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Required.</source>
          <target state="new">$x$x$Xxxxxxxx.</target>
        </trans-unit><trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Any &lt;strong&gt;Boolean&lt;/strong&gt; or numeric expression.&lt;/p&gt;\n</source>
          <target state="new">Xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="320" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A &lt;strong&gt;Boolean&lt;/strong&gt; or numeric value.</source>
          <target state="new">$x$x$X $xxxxxx$Xxxxxxx$$xxxxxx$ xx xxxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="321" translate="yes" xml:space="preserve">
          <source>For a &lt;strong&gt;Boolean&lt;/strong&gt; comparison, the return value is the logical exclusion (exclusive logical disjunction) of two &lt;strong&gt;Boolean&lt;/strong&gt; values.</source>
          <target state="new">Xxx x $xxxxxx$Xxxxxxx$$xxxxxx$ xxxxxxxxxx$ xxx xxxxxx xxxxx xx xxx xxxxxxx xxxxxxxxx $xxxxxxxxx xxxxxxx xxxxxxxxxxx$ xx xxx $xxxxxx$Xxxxxxx$$xxxxxx$ xxxxxx.</target>
        </trans-unit><trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.</source>
          <target state="new">Xxx xxxxxxx $xxxxxxx$ xxxxxxxxxx$ xxx xxxxxx xxxxx xx x xxxxxxx xxxxx xxxx xxxxxxxxxx xxx xxxxxxx xxxxxxxxx $xxxxxxxxx xxxxxxx xxxxxxxxxxx$ xx xxx xxxxxxx xxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For more information, see Xor Operator (Visual Basic).&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxxxxxxxxxx$ xxx Xxx Xxxxxxxx $Xxxxxx Xxxxx$.$$x$$x</target>
        </trans-unit></group></body></file></xliff>