<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="markdown" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" /></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Applies an accumulator function over a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xx xxxxxxxxxxx xxxxxxxx xxxx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxxxxxx xxxxxxxx xx xx xxxxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Applies an accumulator function over a sequence.</source>
          <target state="new">$x$x$Xxxxxxx xx xxxxxxxxxxx xxxxxxxx xxxx x xxxxxxxx.</target>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The specified seed value is used as the initial accumulator value.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxx xxxx xxxxx xx xxxx xx xxx xxxxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxxxxxx xxxxxxxx xx xx xxxxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Applies an accumulator function over a sequence.</source>
          <target state="new">$x$x$Xxxxxxx xx xxxxxxxxxxx xxxxxxxx xxxx x xxxxxxxx.</target>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxxx xxxx xxxxx xx xxxx xx xxx xxxxxxx xxxxxxxxxxx xxxxx$ xxx xxx xxxxxxxxx xxxxxxxx xx xxxx xx xxxxxx xxx xxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxxxxxx xxxxxxxx xx xx xxxxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to transform the final accumulator value into the result value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxxxx xxx xxxxx xxxxxxxxxxx xxxxx xxxx xxx xxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxxxxx xxxxx xxxxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether all elements of a sequence satisfy a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxxxx xxxxxxx xx xxx xxxxxx xxxxxxxx xxxxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxxx$ xx xx xxx xxxxxxxx xx xxxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether a sequence contains any elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx x xxxxxxxx xxxxxxxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains any elements; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xxxxxxxx xxx xxxxxxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether any element of a sequence satisfies a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxx xx x xxxxxxxx xxxxxxxxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx xxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of source.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xx xxxxx xx xxxxxxxx xxxx xxxxxx xxxx xxx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type to cast the elements of &lt;em&gt;source&lt;/em&gt; to.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxxx xxx xxxxxxxx xx $xx$xxxxxx$$xx$ xx.$$x$$x</target>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An element in the sequence cannot be cast to type &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxx xx xxx xxxxxxxx xxxxxx xx xxxx xx xxxx $xx$XXxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Concatenates two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxxxx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to concatenate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to concatenate to the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether a sequence contains a specified element by using the default equality comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx x xxxxxxxx xxxxxxxx x xxxxxxxxx xxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxx xx xxxxxx x xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xxxxxxxx xx xxxxxxx xxxx xxx xxx xxxxxxxxx xxxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxx xx xxxxxx x xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An equality comparer to compare values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxxx xxxxxxxx xx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxx xxxxxxxx xxxxxxxx xx xxxxxxx xxxx xxx xxx xxxxxxxxx xxxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the number of elements in a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxx xx xxxxxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxxxxxxx xx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of elements in the input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns a number that represents how many elements in the specified sequence satisfy a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxx xxxx xxxxxxxxxx xxx xxxx xxxxxxxx xx xxx xxxxxxxxx xxxxxxxx xxxxxxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains elements to be tested and counted.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxxxxxxx xx xx xxxxxx xxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxx xxxx xxxxxxxxxx xxx xxxx xxxxxxxx xx xxx xxxxxxxx xxxxxxx xxx xxxxxxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxxxxx xx xxx xxxx xxxxxxxxx$x xxxxxxx xxxxx xx x xxxxxxxxx xxxxxxxxxx xx xxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to return a default value for if it is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx x xxxxxxx xxxxx xxx xx xx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxxxxx xx xxx xxxxxxxxx xxxxx xx x xxxxxxxxx xxxxxxxxxx xx xxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to return the specified value for if it is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx xxx xxxxxxxxx xxxxx xxx xx xx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to return if the sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxxxx xx xxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="258" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns distinct elements from a sequence by using the default equality comparer to compare values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxxxxxxx xxxxxxxx xxxx x xxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx xx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="259" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx xxxxxxxxx xxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="260" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="261" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="262" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx xxxxxxxxx xxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="263" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="264" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="265" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the element at a specified index in a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxx xx x xxxxxxxxx xxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="266" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx$xxxxx xxxxx xx xxx xxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="267" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="268" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The element at the specified position in the source sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xx xxx xxxxxxxxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="269" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="270" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;index&lt;/em&gt; is less than 0 or greater than or equal to the number of elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx xxxx xxxx 0 xx xxxxxxx xxxx xx xxxxx xx xxx xxxxxx xx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="271" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the element at a specified index in a sequence or a default value if the index is out of range.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxx xx x xxxxxxxxx xxxxx xx x xxxxxxxx xx x xxxxxxx xxxxx xx xxx xxxxx xx xxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="272" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx$xxxxx xxxxx xx xxx xxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="273" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="274" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx xxx xxxxx xx xxxxxxx xxx xxxxxx xx xxx xxxxxx xxxxxxxx$ xxxxxxxxx$ xxx xxxxxxx xx xxx xxxxxxxxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="275" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="276" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Produces the set difference of two sequences by using the default equality comparer to compare values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxx xxx xxxxxxxxxx xx xxx xxxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx xx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="277" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="278" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxx xxx xxxxxxxxxx xx xxx xxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="279" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="280" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="281" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxx xxx xxxxxxxxxx xx xxx xxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="282" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="283" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the first element of a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxx xxxxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="284" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="285" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first element in the specified sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="286" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="287" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="288" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the first element in a sequence that satisfies a specified condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxx xxxxxxx xx x xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="289" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="290" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="291" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxx xx xxx xxxxxxxx xxxx xxxxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="292" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="293" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxx xxxxxxxxx xxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$.$$x$$x$x$$xx$$$x$$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="294" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the first element of a sequence, or a default value if the sequence contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxx xxxxxxx xx x xxxxxxxx$ xx x xxxxxxx xxxxx xx xxx xxxxxxxx xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="295" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="296" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, the first element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx $xx$xxxxxx$$xx$ xx xxxxx$ xxxxxxxxx$ xxx xxxxx xxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="297" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="298" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxx xxxxxxx xx xxx xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xx x xxxxxxx xxxxx xx xx xxxx xxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="299" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="300" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="301" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty or if no element passes the test specified by &lt;em&gt;predicate&lt;/em&gt;; otherwise, the first element in &lt;em&gt;source&lt;/em&gt; that passes the test specified by &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx $xx$xxxxxx$$xx$ xx xxxxx xx xx xx xxxxxxx xxxxxx xxx xxxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$$ xxxxxxxxx$ xxx xxxxx xxxxxxx xx $xx$xxxxxx$$xx$ xxxx xxxxxx xxx xxxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="302" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="303" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="304" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="305" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="306" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="307" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="308" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxxx xxx xxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="309" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="310" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="311" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="312" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="313" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxxx xxx xxxxxxxx xxx xxxx xxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="314" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="315" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="316" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="317" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="318" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a key selector function.</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxx xxxxxxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxx xxxxxxxx xx xxxxx x xxxxxxxx xxx xxxx xxxxx$x xxxxxxxx xxx xxxxxxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="320" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="321" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="322" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="323" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="324" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx xxx xxx xxx.$$x$$x</target>
        </trans-unit><trans-unit id="325" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="326" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="327" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="328" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="329" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxx xxxxxxxx xx $xx$xxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="330" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxxx xx xxxxxxxx xx xxxx $xx$XXxxxxx$$xx$ xxxxx xxxx xxxxxxx xxxxxxxxxx x xxxxxxxxxx xxxx x xxxxx xxx xxx xxx.$$x$$x</target>
        </trans-unit><trans-unit id="331" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx xxx xxx xxx.</target>
        </trans-unit><trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The keys are compared by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxx xxx xxxxxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="333" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="334" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="335" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="336" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="337" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxx xxxxxxxx xx $xx$xxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="338" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxxx xx xxxxxxxx xx xxxx $xx$XXxxxxx$$xx$ xxxxx xxxx xxxxxxx xxxxxxxxxx x xxxxxxxxxx xxxx x xxxxx xxx xxx xxx.$$x$$x</target>
        </trans-unit><trans-unit id="339" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx xxx xxx xxx.</target>
        </trans-unit><trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The elements of each group are projected by using a specified function.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxxx xx xxxx xxxxx xxx xxxxxxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="341" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="342" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="343" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="344" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="345" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxx xxxxxxxx xx $xx$xxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="346" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxxx xx xxxxxxxx xx xxxx $xx$XXxxxxx$$xx$ xxxxx xxxx xxxxxxx xxxxxxxxxx x xxxxxxxxxx xxxx x xxxxx xxx xxx xxx.$$x$$x</target>
        </trans-unit><trans-unit id="347" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="new">$x$x$Xxxxxx xxx xxxxxxxx xx x xxxxxxxx xxxxxxxxx xx x xxxxxxxxx xxx xxxxxxxx xxxxxxxx xxx xxxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx xxx xxx xxx.</target>
        </trans-unit><trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxx xxx xxxxxxxx xx xxxxx x xxxxxxxxx xxxxxxxx$ xxx xxx xxxxxxxx xx xxxx xxxxx xxx xxxxxxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="349" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="350" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxx xxxx xxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="351" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="352" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="353" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxx xxxxxxxx xx $xx$xxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="354" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxxx xx xxxxxxxx xx xxxx $xx$XXxxxxx$$xx$ xxxxx xxxx xxxxxxx xxxxxxxxxx x xxxxxxxxxx xxxx x xxxxx xxx xxx xxx.$$x$$x</target>
        </trans-unit><trans-unit id="355" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Correlates the elements of two sequences based on equality of keys and groups the results.</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxx xx xxxxxxxx xx xxxx xxx xxxxxx xxx xxxxxxx.</target>
        </trans-unit><trans-unit id="356" translate="yes" xml:space="preserve">
          <source>The default equality comparer is used to compare keys.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxx xxxxxxxx xx xxxx xx xxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="357" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="358" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="359" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="360" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="361" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxxxx xxxx xx xxxxxxx xxxx xxx xxxxx xxxxxxxx xxx x xxxxxxxxxx xx xxxxxxxx xxxxxxxx xxxx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="362" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="363" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="364" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxx xxxxxxxx xx xxx xxx xxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="365" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="366" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="367" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="368" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="369" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="370" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="371" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxxxx xxxx xx xxxxxxx xxxx xxx xxxxx xxxxxxxx xxx x xxxxxxxxxx xx xxxxxxxx xxxxxxxx xxxx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="372" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="373" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="374" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxx xxxxxxxx xx xxx xxx xxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="375" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="376" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="377" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Produces the set intersection of two sequences by using the default equality comparer to compare values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxx xxx xxxxxxxxxxxx xx xxx xxxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx xx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="378" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="379" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxx xxxxxxxx xxxx xxxx xxx xxx xxxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="380" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="381" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="382" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxx xxx xxxxxxxx xxxx xxxx xxx xxx xxxxxxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="383" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="384" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Correlates the elements of two sequences based on matching keys.</source>
          <target state="new">$x$x$Xxxxxxxxxx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxx xx xxxxxxxx xxxx.</target>
        </trans-unit><trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The default equality comparer is used to compare keys.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx xxxxxxxx xxxxxxxx xx xxxx xx xxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="386" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="387" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="388" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="389" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="390" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxxxx xxxx xxx xxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="391" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="392" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="393" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxx xxxxxxxx xx xxx xxx xxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="394" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="395" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="396" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="397" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="398" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="399" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx xxx xxxx xxx xxxx xxxx xxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="400" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx x xxxxxx xxxxxxx xxxx xxx xxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="401" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="402" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="403" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxx xxxxxxxx xx xxx xxx xxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="404" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="405" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxXxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="406" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the last element of a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="407" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="408" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value at the last position in the source sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxx xxxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="409" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="410" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="411" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the last element of a sequence that satisfies a specified condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="412" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="413" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="414" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The last element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xxxxxxx xx xxx xxxxxxxx xxxx xxxxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="415" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="416" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxx xxxxxxxxx xxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$.$$x$$x$x$$xx$$$x$$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="417" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the last element of a sequence, or a default value if the sequence contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx$ xx x xxxxxxx xxxxx xx xxx xxxxxxxx xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="418" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="419" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="420" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xx x xxxxxxx xxxxx xx xx xxxx xxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="421" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="422" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="423" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx xxx xxxxxxxx xx xxxxx xx xx xx xxxxxxxx xxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxx$ xxxxxxxxx$ xxx xxxx xxxxxxx xxxx xxxxxx xxx xxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="424" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="425" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="426" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of elements in the source sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="427" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="428" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="429" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="430" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxx xxxx xxxxxxxxxx xxx xxxx xxxxxxxx xx xxx xxxxxxxx xxxxxxx xxx xxxxxxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="431" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="432" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="433" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="434" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="435" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="436" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="437" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="438" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="439" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="440" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="441" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="442" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="443" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="444" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="445" translate="yes" xml:space="preserve">
          <source> &lt;/p&gt;\n</source>
          <target state="new">$$$x$$x</target>
        </trans-unit><trans-unit id="446" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="447" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="448" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="449" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="450" translate="yes" xml:space="preserve">
          <source> &lt;/p&gt;\n</source>
          <target state="new">$$$x$$x</target>
        </trans-unit><trans-unit id="451" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="452" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="453" translate="yes" xml:space="preserve">
          <source> &lt;/p&gt;\n</source>
          <target state="new">$$$x$$x</target>
        </trans-unit><trans-unit id="454" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="455" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="456" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="457" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="458" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="459" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="460" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the maximum value in a generic sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxx xxxxx xx x xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="461" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="462" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="463" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="464" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="465" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="466" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="467" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="468" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="469" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="470" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="471" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="472" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="473" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="474" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="475" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="476" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="477" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="478" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="479" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="480" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="481" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="482" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="483" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="484" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="485" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="486" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="487" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="488" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="489" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="490" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="491" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="492" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="493" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="494" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="495" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="496" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="497" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="498" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="499" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="500" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="501" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="502" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="503" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="504" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="505" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="506" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="507" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="508" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="509" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="510" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="511" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="512" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="513" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="514" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="515" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="516" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="517" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="518" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="519" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="520" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxxx xxxxxxxx xx xxxx xxxxxxx xx x xxxxxxx xxxxxxxx xxx xxxxxxx xxx xxxxxxx xxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="521" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="522" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="523" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="524" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="525" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="526" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="527" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="528" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="529" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="530" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="531" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="532" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="533" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="534" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="535" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="536" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="537" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="538" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="539" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="540" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="541" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="542" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="543" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="544" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="545" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="546" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="547" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="548" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="549" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="550" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="551" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="552" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the minimum value in a generic sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxx xxxxx xx x xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="553" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="554" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="555" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="556" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="557" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="558" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="559" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="560" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="561" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="562" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="563" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="564" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="565" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="566" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="567" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="568" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="569" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="570" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="571" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="572" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="573" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="574" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="575" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="576" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="577" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="578" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="579" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="580" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="581" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="582" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="583" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="584" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="585" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="586" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="587" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="588" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="589" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="590" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="591" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="592" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="593" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="594" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="595" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="596" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="597" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="598" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="599" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxx00$ xx X$ xx Xxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="600" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="601" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="602" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="603" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="604" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxx Xxxxxxxx$Xxxxxx$ xx X$ xx Xxxxxxxx$Xx Xxxxxx$ xx Xxxxxx Xxxxx xxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="605" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="606" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="607" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="608" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="609" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="610" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="611" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="612" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxxx xxxxxxxx xx xxxx xxxxxxx xx x xxxxxxx xxxxxxxx xxx xxxxxxx xxx xxxxxxx xxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="613" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxxxx xxx xxxxxxx xxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="614" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="615" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="616" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="617" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="618" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="619" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type to filter the elements of the sequence on.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxxxxx xxx xxxxxxxx xx xxx xxxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="620" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="621" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Sorts the elements of a sequence in ascending order according to a key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxx xxxxx xxxxxxxxx xx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="622" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="623" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="624" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="625" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="626" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="627" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Sorts the elements of a sequence in ascending order by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxx xxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="628" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="629" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="630" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="631" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="632" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="633" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Sorts the elements of a sequence in descending order according to a key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxxx xxxxx xxxxxxxxx xx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="634" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="635" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="636" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="637" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="638" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="639" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Sorts the elements of a sequence in descending order by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxxx xxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="640" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="641" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="642" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="643" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="644" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="645" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Generates a sequence of integral numbers within a specified range.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxx x xxxxxxxx xx xxxxxxxx xxxxxxx xxxxxx x xxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="646" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value of the first integer in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xxx xxxxx xxxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="647" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of sequential integers to generate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxxx xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="648" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx XXxxxxxxxxx$Xxx00$ xx X$ xx XXxxxxxxxxx$Xx Xxx00$ xx Xxxxxx Xxxxx xxxx xxxxxxxx x xxxxx xx xxxxxxxxxx xxxxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="649" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Generates a sequence that contains one repeated value.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxx x xxxxxxxx xxxx xxxxxxxx xxx xxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="650" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be repeated.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="651" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of times to repeat the value in the generated sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxx xx xxxxxx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="652" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value to be repeated in the result sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xx xx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="653" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx xxxx xxxx 0.$$x$$x</target>
        </trans-unit><trans-unit id="654" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Inverts the order of the elements in a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxx xx xxx xxxxxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="655" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to reverse.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="656" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="657" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence whose elements correspond to those of the input sequence in reverse order.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxxx xxxxxxxx xxxxxxxxxx xx xxxxx xx xxx xxxxx xxxxxxxx xx xxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="658" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="659" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Projects each element of a sequence into a new form.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxxx xxxxxxx xx x xxxxxxxx xxxx x xxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="660" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxx x xxxxxxxxx xxxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="661" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="662" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="663" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="664" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="665" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Projects each element of a sequence into a new form by incorporating the element's index.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxxx xxxxxxx xx x xxxxxxxx xxxx x xxx xxxx xx xxxxxxxxxxxxx xxx xxxxxxx$x xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="666" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxx x xxxxxxxxx xxxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="667" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxx xxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="668" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="669" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="670" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="671" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="672" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="673" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="674" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the sequence returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="675" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="676" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="677" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxx xxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="678" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="679" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the sequence returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxxxx xxxxxxxx xx $xx$xxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="680" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="681" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="682" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element of the input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="683" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element of the intermediate sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx xx xxx xxxxxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="684" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="685" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxxxxxx xxxxxxxx xxxxxxxxx xx $xx$xxxxxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="686" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="687" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="688" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="689" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxx xxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="690" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element of the intermediate sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx xx xxx xxxxxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="691" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="692" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxxxxxx xxxxxxxx xxxxxxxxx xx $xx$xxxxxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="693" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="694" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxxxXxxxxxxx$$xx$ xx $xx$xxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="695" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxxxx xxx xxxxx xx xxxxxxxxx xxx xxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx xxx xxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="696" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="697" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxx xxxxxx xxxxxxxxx xxx xx xxxxx xxxxxx xxx xxxxx xxxxxxxxxxxxx xxxxxxxx xxx xxxxx xxxxxxxxx xx xxx xxxxxxx xxxxxxxx xxxxxxxx xxx xxxxx xxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="698" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="699" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="700" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements compare equal according to &lt;em&gt;comparer&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxx xxx xxxxxx xxxxxxxxx xxx xx xxxxx xxxxxx xxx xxxxx xxxxxxxxxxxxx xxxxxxxx xxxxxxx xxxxx xxxxxxxxx xx $xx$xxxxxxxx$$xx$$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="701" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="702" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx$ xxx xxxxxx xx xxxxxxxxx xx xxxxx xx xxx xxxxxxx xxx xxxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="703" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="704" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The single element of the input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxx xx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="705" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="706" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The input sequence contains more than one element.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The input sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xxxxxxxx xxxx xxxx xxx xxxxxxx.$$x$$x$x$$xx$$$x$$x$x$Xxx xxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="707" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xxxxxxxxx$ xxx xxxxxx xx xxxxxxxxx xx xxxx xxxx xxx xxxx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="708" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="709" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="710" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The single element of the input sequence that satisfies a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxx xx xxx xxxxx xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="711" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="712" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;More than one element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxx xxxxxxxxx xxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$.$$x$$x$x$$xx$$$x$$x$x$Xxxx xxxx xxx xxxxxxx xxxxxxxxx xxx xxxxxxxxx xx $xx$xxxxxxxxx$$xx$.$$x$$x$x$$xx$$$x$$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="713" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx$ xx x xxxxxxx xxxxx xx xxx xxxxxxxx xx xxxxx$ xxxx xxxxxx xxxxxx xx xxxxxxxxx xx xxxxx xx xxxx xxxx xxx xxxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="714" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="715" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The single element of the input sequence, or &lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the sequence contains no elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxx xx xxx xxxxx xxxxxxxx$ xx $xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx xxx xxxxxxxx xxxxxxxx xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="716" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="717" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The input sequence contains more than one element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xxxxxxxx xxxx xxxx xxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="718" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxx xx x xxxxxxxx xxxx xxxxxxxxx x xxxxxxxxx xxxxxxxxx xx x xxxxxxx xxxxx xx xx xxxx xxxxxxx xxxxxx$ xxxx xxxxxx xxxxxx xx xxxxxxxxx xx xxxx xxxx xxx xxxxxxx xxxxxxxxx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="719" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="720" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="721" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The single element of the input sequence that satisfies the condition, or &lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if no such element is found.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxx xx xxx xxxxx xxxxxxxx xxxx xxxxxxxxx xxx xxxxxxxxx$ xx $xxxxxx$xxxxxxx$$xxxxxx$$$xx$XXxxxxx$$xx$$ xx xx xxxx xxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="722" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="723" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Bypasses a specified number of elements in a sequence and then returns the remaining elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx x xxxxxxxxx xxxxxx xx xxxxxxxx xx x xxxxxxxx xxx xxxx xxxxxxx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="724" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of elements to skip before returning the remaining elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxx xx xxxx xxxxxx xxxxxxxxx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="725" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="726" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="727" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxxxxxxx xx x xxxxxxxx xx xxxx xx x xxxxxxxxx xxxxxxxxx xx xxxx xxx xxxx xxxxxxx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="728" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="729" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="730" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="731" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="new">$x$x$Xxxxxxxx xxxxxxxx xx x xxxxxxxx xx xxxx xx x xxxxxxxxx xxxxxxxxx xx xxxx xxx xxxx xxxxxxx xxx xxxxxxxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The element's index is used in the logic of the predicate function.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx$x xxxxx xx xxxx xx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="733" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxx xxxxxxx xxx x xxxxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="734" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="735" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="736" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="737" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="738" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="739" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="740" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="741" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="742" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="743" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="744" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="745" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="746" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="747" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="748" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="749" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="750" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="751" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="752" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="753" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="754" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="755" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="756" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="757" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="758" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="759" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="760" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="761" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="762" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="763" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="764" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="765" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="766" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="767" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="768" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="769" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="770" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="771" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="772" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="773" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="774" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="775" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="776" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="777" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="778" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="779" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="780" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="781" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="782" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="783" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="784" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="785" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="786" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="787" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="788" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="789" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="790" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="791" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="792" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="793" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="794" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="795" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="796" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="797" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="798" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="799" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="800" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="801" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxx xxx xxxx xx xxxxxxxxx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="802" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxx xx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="803" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="804" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx xxx xxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="805" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="806" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns a specified number of contiguous elements from the start of a sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxxx xxxxxx xx xxxxxxxxxx xxxxxxxx xxxx xxx xxxxx xx x xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="807" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx xxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="808" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of elements to return.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxx xx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="809" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="810" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="811" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns elements from a sequence as long as a specified condition is true.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxxxxxxx xxxx x xxxxxxxx xx xxxx xx x xxxxxxxxx xxxxxxxxx xx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="812" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A sequence to return elements from.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxx xxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="813" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="814" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="815" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="816" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="new">$x$x$Xxxxxxx xxxxxxxx xxxx x xxxxxxxx xx xxxx xx x xxxxxxxxx xxxxxxxxx xx xxxx.</target>
        </trans-unit><trans-unit id="817" translate="yes" xml:space="preserve">
          <source>The element's index is used in the logic of the predicate function.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxxx$x xxxxx xx xxxx xx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="818" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx xxxxxx xxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="819" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxx xxxxxxx xxx x xxxxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="820" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="821" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="822" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx x xxxxxxxxxx xxxxxxxx xx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxx xxxxx xxxxxxxxx xx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="823" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="824" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="825" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="826" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="827" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx x xxxxxxxxxx xxxxxxxx xx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxx xxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="828" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="829" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="830" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="831" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="832" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx x xxxxxxxxxx xxxxxxxx xx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxxx xxxxx$ xxxxxxxxx xx x xxx.$$x$$x</target>
        </trans-unit><trans-unit id="833" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="834" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="835" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="836" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="837" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx x xxxxxxxxxx xxxxxxxx xx xxx xxxxxxxx xx x xxxxxxxx xx xxxxxxxxxx xxxxx xx xxxxx x xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="838" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="839" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="840" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="841" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="842" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="843" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array that contains the elements from the input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxx xxxx xxxxxxxx xxx xxxxxxxx xxxx xxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="844" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="845" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="846" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="847" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="848" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x$x$$xx$$$x$$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx x xxx xxxx xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="849" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx xxxxxxxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="850" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="851" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="852" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the keys returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="853" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x$x$$xx$$$x$$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx x xxx xxxx xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="854" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx xxxxxxxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="855" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="856" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxxxx x xxxxxx xxxxxxx xxxxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="857" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="858" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="859" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="860" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x$x$$xx$$$x$$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx x xxx xxxx xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="861" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx xxxxxxxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="862" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="863" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxxxx x xxxxxx xxxxxxx xxxxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="864" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="865" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="866" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="867" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x$x$$xx$$$x$$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx x xxx xxxx xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="868" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxXxxxxxxx$$xx$ xxxxxxxx xxxxxxxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="869" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="870" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="871" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="872" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="873" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="874" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="875" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="876" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="877" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="878" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="879" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="880" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxxxx x xxxxxx xxxxxxx xxxxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="881" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="882" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="883" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="884" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="885" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxxxxx x xxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="886" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxxx xxxxxxxx xx xxxxxxx x xxxxxx xxxxxxx xxxxx xxxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="887" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="888" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxx xxxxxxxx xx $xx$xxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="889" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxx xxxxxxxx xx $xx$xxxxxxxXxxxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="890" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxXxxxxxxx$$xx$ xx $xx$xxxxxxxXxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="891" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Produces the set union of two sequences by using the default equality comparer.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxx xxx xxx xxxxx xx xxx xxxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="892" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="893" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="894" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="895" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="896" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Filters a sequence of values based on a predicate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxx xx xxxxxx xxxxx xx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="897" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxxx xxx x xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="898" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="899" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="900" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Filters a sequence of values based on a predicate.</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxx xx xxxxxx xxxxx xx x xxxxxxxxx.</target>
        </trans-unit><trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Each element's index is used in the logic of the predicate function.&lt;/p&gt;\n</source>
          <target state="new">Xxxx xxxxxxx$x xxxxx xx xxxx xx xxx xxxxx xx xxx xxxxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="902" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xx xxxx xxxx xxxxxx xxxxxxx xxx x xxxxxxxxx$ xxx xxxxxx xxxxxxxxx xx xxx xxxxxxxx xxxxxxxxxx xxx xxxxx xx xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="903" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx $xx$xxxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="904" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="905" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxxxxxxx xxxxxxxx xx xxx xxxxxxxxxxxxx xxxxxxxx xx xxx xxxxxxxxx$ xxxxxxxxx x xxxxxxxx xx xxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="906" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first sequence to merge.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="907" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second sequence to merge.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="908" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A function that specifies how to merge the elements from the two sequences.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxxxxxx xxxx xxxxxxxxx xxx xx xxxxx xxx xxxxxxxx xxxx xxx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="909" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the first input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="910" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the second input sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="911" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the elements of the result sequence.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xx xxx xxxxxxxx xx xxx xxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="912" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit></group></body></file></xliff>