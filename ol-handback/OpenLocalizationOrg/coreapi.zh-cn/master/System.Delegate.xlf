<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="markdown" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" /></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx x xxxxxxxx$ xxxxx xx x xxxx xxxxxxxxx xxxx xxxxxx xx x xxxxxx xxxxxx xx xx x xxxxx xxxxxxxx xxx xx xxxxxxxx xxxxxx xx xxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Gets the class instance on which the current delegate invokes the instance method.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxx xxx xxxxx xxxxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxx xxx xxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object on which the current delegate invokes the instance method, if the delegate represents an instance method; &lt;strong&gt;null&lt;/strong&gt; if the delegate represents a static method.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxx xxx xxxxxxx xxxxxxxx xxxxxxx xxx xxxxxxxx xxxxxx$ xx xxx xxxxxxxx xxxxxxxxxx xx xxxxxxxx xxxxxx$ $xxxxxx$xxxx$$xxxxxx$ xx xxx xxxxxxxx xxxxxxxxxx x xxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Concatenates the invocation lists of two delegates.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxxxx xxx xxxxxxxxxx xxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate whose invocation list comes first.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xxxxxxxxxx xxxx xxxxx xxxxx.</target>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate whose invocation list comes last.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xxxxxxxxxx xxxx xxxxx xxxx.</target>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A new delegate with an invocation list that concatenates the invocation lists of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; in that order.</source>
          <target state="new">$x$x$X xxx xxxxxxxx xxxx xx xxxxxxxxxx xxxx xxxx xxxxxxxxxxxx xxx xxxxxxxxxx xxxxx xx $xx$x$$xx$ xxx $xx$x$$xx$ xx xxxx xxxxx.</target>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;a&lt;/em&gt; if &lt;em&gt;b&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, returns &lt;em&gt;b&lt;/em&gt; if &lt;em&gt;a&lt;/em&gt; is a null reference, and returns a null reference if both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are null references.&lt;/p&gt;\n</source>
          <target state="new">Xxxxxxx $xx$x$$xx$ xx $xx$x$$xx$ xx $xxxxxx$xxxx$$xxxxxx$$ xxxxxxx $xx$x$$xx$ xx $xx$x$$xx$ xx x xxxx xxxxxxxxx$ xxx xxxxxxx x xxxx xxxxxxxxx xx xxxx $xx$x$$xx$ xxx $xx$x$$xx$ xxx xxxx xxxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are not instances of the same delegate type.</source>
          <target state="new">$x$x$Xxxx $xx$x$$xx$ xxx $xx$x$$xx$ xxx xxx $xxxxxx$xxxx$$xxxxxx$$ xxx $xx$x$$xx$ xxx $xx$x$$xx$ xxx xxx xxxxxxxxx xx xxx xxxx xxxxxxxx xxxx.</target>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Concatenates the invocation lists of an array of delegates.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxxxx xxx xxxxxxxxxx xxxxx xx xx xxxxx xx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The array of delegates to combine.</source>
          <target state="new">$x$x$Xxx xxxxx xx xxxxxxxxx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A new delegate with an invocation list that concatenates the invocation lists of the delegates in the &lt;em&gt;delegates&lt;/em&gt; array.</source>
          <target state="new">$x$x$X xxx xxxxxxxx xxxx xx xxxxxxxxxx xxxx xxxx xxxxxxxxxxxx xxx xxxxxxxxxx xxxxx xx xxx xxxxxxxxx xx xxx $xx$xxxxxxxxx$$xx$ xxxxx.</target>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Returns &lt;strong&gt;null&lt;/strong&gt; if &lt;em&gt;delegates&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, if &lt;em&gt;delegates&lt;/em&gt; contains zero elements, or if every entry in &lt;em&gt;delegates&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">Xxxxxxx $xxxxxx$xxxx$$xxxxxx$ xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$$ xx $xx$xxxxxxxxx$$xx$ xxxxxxxx xxxx xxxxxxxx$ xx xx xxxxx xxxxx xx $xx$xxxxxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Not all the non-null entries in &lt;em&gt;delegates&lt;/em&gt; are instances of the same delegate type.</source>
          <target state="new">$x$x$Xxx xxx xxx xxx$xxxx xxxxxxx xx $xx$xxxxxxxxx$$xx$ xxx xxxxxxxxx xx xxx xxxx xxxxxxxx xxxx.</target>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Dynamically invokes (late-bound) the method represented by the current delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxxx xxxxxxx $xxxx$xxxxx$ xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array of objects that are the arguments to pass to the method represented by the current delegate.&lt;/p&gt;\n&lt;p&gt;-or- &lt;/p&gt;\n&lt;p&gt;\n&lt;strong&gt;null&lt;/strong&gt;, if the method represented by the current delegate does not require arguments.</source>
          <target state="new">$x$x$Xx xxxxx xx xxxxxxx xxxx xxx xxx xxxxxxxxx xx xxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxxxxx.$$x$$x$x$$xx$ $$x$$x$x$$x$xxxxxx$xxxx$$xxxxxx$$ xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxx xxxxxxxx xxxx xxx xxxxxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object returned by the method represented by the delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).&lt;/p&gt;\n&lt;p&gt;-or- &lt;/p&gt;\n&lt;p&gt;The number, order, or type of parameters listed in &lt;em&gt;args&lt;/em&gt; is invalid.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxx xxx xxxx xxxxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx $xxx xxxxxxx$ xx xxx xxxxxx xx xxxxxxx$.$$x$$x$x$$xx$ $$x$$x$x$Xxx xxxxxx$ xxxxx$ xx xxxx xx xxxxxxxxxx xxxxxx xx $xx$xxxx$$xx$ xx xxxxxxx.</target>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The method represented by the delegate is invoked on an object or a class that does not support it.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx xx xxxxxxx xx xx xxxxxx xx x xxxxx xxxx xxxx xxx xxxxxxx xx.</target>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The method represented by the delegate is an instance method and the target object is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or- &lt;/p&gt;\n&lt;p&gt;One of the encapsulated methods throws an exception.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx xx xx xxxxxxxx xxxxxx xxx xxx xxxxxx xxxxxx xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x$x$$xx$ $$x$$x$x$Xxx xx xxx xxxxxxxxxxxx xxxxxxx xxxxxx xx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxxxx xxxxxx xxx xxx xxxxxxx xxxxxxxx xxx xx xxx xxxx xxxx xxx xxxxx xxx xxxx xxxxxxx$ xxxxxxx$ xxx xxxxxxxxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object to compare with the current delegate.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxx xxxx xxx xxxxxxx xxxxxxxx.</target>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; and the current delegate have the same targets, methods, and invocation list; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx $xx$xxx$$xx$ xxx xxx xxxxxxx xxxxxxxx xxxx xxx xxxx xxxxxxx$ xxxxxxx$ xxx xxxxxxxxxx xxxx$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).</source>
          <target state="new">$x$x$Xxx xxxxxx xxxx xxx xxxx xxxxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx $xxx xxxxxxx$ xx xxx xxxxxx xx xxxxxxx$.</target>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns a hash code for the delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx x xxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A hash code for the delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$X xxxx xxxx xxx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the invocation list of the delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxxxxx xxxx xx xxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array of delegates representing the invocation list of the current delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxx xx xxxxxxxxx xxxxxxxxxxxx xxx xxxxxxxxxx xxxx xx xxx xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether the specified delegates are equal.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxxxx xxxxxxxxx xxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first delegate to compare.</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second delegate to compare.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx $xx$x0$$xx$ xx xxxxx xx $xx$x0$$xx$$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Determines whether the specified delegates are not equal.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxxxxx xxxxxxx xxx xxxxxxxxx xxxxxxxxx xxx xxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first delegate to compare.</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxxxx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second delegate to compare.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxxxx xx xxxxxxx.</target>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; is not equal to &lt;em&gt;d2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx $xx$x0$$xx$ xx xxx xxxxx xx $xx$x0$$xx$$ xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxxxxx xx xxx xxxxxxxxxx xxxx xx x xxxxxxxx xxxx xxx xxxxxxxxxx xxxx xx xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate from which to remove the invocation list of &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxx xxxxx xx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate that supplies the invocation list to remove from the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxx xxxxxxxx xxx xxxxxxxxxx xxxx xx xxxxxx xxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A new delegate with an invocation list formed by taking the invocation list of &lt;em&gt;source&lt;/em&gt; and removing the last occurrence of the invocation list of &lt;em&gt;value&lt;/em&gt;, if the invocation list of &lt;em&gt;value&lt;/em&gt; is found within the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">$x$x$X xxx xxxxxxxx xxxx xx xxxxxxxxxx xxxx xxxxxx xx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$ xxx xxxxxxxx xxx xxxx xxxxxxxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$$ xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxxxx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;source&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or if the invocation list of &lt;em&gt;value&lt;/em&gt; is not found within the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">Xxxxxxx $xx$xxxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxx xxxxx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a null reference if the invocation list of &lt;em&gt;value&lt;/em&gt; is equal to the invocation list of &lt;em&gt;source&lt;/em&gt; or if &lt;em&gt;source&lt;/em&gt; is a null reference.&lt;/p&gt;\n</source>
          <target state="new">Xxxxxxx x xxxx xxxxxxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$ xx xx $xx$xxxxxx$$xx$ xx x xxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).</source>
          <target state="new">$x$x$Xxx xxxxxx xxxx xxx xxxx xxxxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx $xxx xxxxxxx$ xx xxx xxxxxx xx xxxxxxx$.</target>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate types do not match.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xx xxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxxxxxxxxx xx xxx xxxxxxxxxx xxxx xx x xxxxxxxx xxxx xxx xxxxxxxxxx xxxx xx xxxxxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate from which to remove the invocation list of &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxx xxxxx xx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate that supplies the invocation list to remove from the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxx xxxxxxxx xxx xxxxxxxxxx xxxx xx xxxxxx xxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A new delegate with an invocation list formed by taking the invocation list of &lt;em&gt;source&lt;/em&gt; and removing all occurrences of the invocation list of &lt;em&gt;value&lt;/em&gt;, if the invocation list of &lt;em&gt;value&lt;/em&gt; is found within the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">$x$x$X xxx xxxxxxxx xxxx xx xxxxxxxxxx xxxx xxxxxx xx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$ xxx xxxxxxxx xxx xxxxxxxxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$$ xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxxxx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;source&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or if the invocation list of &lt;em&gt;value&lt;/em&gt; is not found within the invocation list of &lt;em&gt;source&lt;/em&gt;.</source>
          <target state="new">Xxxxxxx $xx$xxxxxx$$xx$ xx $xx$xxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxx xxxxx xxxxxx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$.</target>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns a null reference if the invocation list of &lt;em&gt;value&lt;/em&gt; is equal to the invocation list of &lt;em&gt;source&lt;/em&gt;, if &lt;em&gt;source&lt;/em&gt; contains only a series of invocation lists that are equal to the invocation list of &lt;em&gt;value&lt;/em&gt;, or if &lt;em&gt;source&lt;/em&gt; is a null reference.&lt;/p&gt;\n</source>
          <target state="new">Xxxxxxx x xxxx xxxxxxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$ xx xxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxxx$$xx$$ xx $xx$xxxxxx$$xx$ xxxxxxxx xxxx x xxxxxx xx xxxxxxxxxx xxxxx xxxx xxx xxxxx xx xxx xxxxxxxxxx xxxx xx $xx$xxxxx$$xx$$ xx xx $xx$xxxxxx$$xx$ xx x xxxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The caller does not have access to the method represented by the delegate (for example, if the method is private).</source>
          <target state="new">$x$x$Xxx xxxxxx xxxx xxx xxxx xxxxxx xx xxx xxxxxx xxxxxxxxxxx xx xxx xxxxxxxx $xxx xxxxxxx$ xx xxx xxxxxx xx xxxxxxx$.</target>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate types do not match.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xx xxx xxxxx.$$x$$x</target>
        </trans-unit></group></body></file></xliff>