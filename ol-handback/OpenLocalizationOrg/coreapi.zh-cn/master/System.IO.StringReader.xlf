<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="markdown" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" /></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">$x$x$Xxx $xx$x$$xx$ xxxxxxxxx xx $xxxxxx$xxxx$$xxxxxx$.</target>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.</source>
          <target state="new">$x$x$$x$xxxxxx$xxxx$$xxxxxx$ xx xxxxxxx xxxx xxxxxxx xxx xxxxxxxxx xxxxxxxxx$ $xxxxxx$xxxxx$$xxxxxx$ xx xxxxxxx xxxx xxxxxxxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Returns the next available character but does not consume it.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxxxx xxx xxxx xxxxxxxxx xxxxxxxxx xxx xxxx xxx xxxxxxx xx.$$x$$x</target>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xx xxxxxxx xxxxxxxxxxxx xxx xxxx xxxxxxxxx xx xx xxxx$ xx $0 xx xx xxxx xxxxxxxxxx xxx xxxxxxxxx xx xxx xxxxxx xxxx xxx xxxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The current reader is closed.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxx.</target>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads the next character from the input string and advances the character position by one character.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxx xxxxxxxxx xxxx xxx xxxxx xxxxxx xxx xxxxxxxx xxx xxxxxxxxx xxxxxxxx xx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The next character from the underlying string, or -1 if no more characters are available.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xxxxxxxxx xxxx xxx xxxxxxxxxx xxxxxx$ xx $0 xx xx xxxx xxxxxxxxxx xxx xxxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The current reader is closed.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxx.</target>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads a block of characters from the input string and advances the character position by &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx x xxxxx xx xxxxxxxxxx xxxx xxx xxxxx xxxxxx xxx xxxxxxxx xxx xxxxxxxxx xxxxxxxx xx $xx$xxxxx$$xx$.$$x$$x</target>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.</source>
          <target state="new">$x$x$Xxxx xxxx xxxxxx xxxxxxx$ xxxxxxxx xxx xxxxxxxxx xxxxxxxxx xxxxx xxxx xxx xxxxxx xxxxxxx $xx$xxxxx$$xx$ xxx $$xx$xxxxx$$xx$ $ $xx$xxxxx$$xx$ $ 0$ xxxxxxxx xx xxx xxxxxxxxxx xxxx xxxx xxx xxxxxxx xxxxxx.</target>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The starting index in the buffer.</source>
          <target state="new">$x$x$Xxx xxxxxxxx xxxxx xx xxx xxxxxx.</target>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of characters to read.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxxx xx xxxx.</target>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The total number of characters read into the buffer.</source>
          <target state="new">$x$x$Xxx xxxxx xxxxxx xx xxxxxxxxxx xxxx xxxx xxx xxxxxx.</target>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.&lt;/p&gt;\n</source>
          <target state="new">Xxxx xxx xx xxxx xxxx xxx xxxxxx xx xxxxxxxxxx xxxxxxxxx xx xxxx xxxx xxxxxxxxxx xxx xxx xxxxxxxxx xxxxxxxxx$ xx xxxx xx xxx xxx xx xxx xxxxxxxxxx xxxxxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.</target>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxx xxxxx $xx$xxxxx$$xx$ xx xxxx xxxx $xx$xxxxx$$xx$.</target>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx xxxxxxxx.</target>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The current reader is closed.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxx.</target>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.</source>
          <target state="new">$x$x$Xxxxx x xxxxxxxxx xxxxxxx xxxxxx xx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxx xxxxxxxxxxxxxx xxx xxxxxx xxx xxxx xx x xxxxxx$ xxxxxxxxx xx xxx xxxxxxxxx xxxxx.</target>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxx xxxx xxxxxx xxxxxxx$ xxxxxxxx xxx xxxxxxxxx xxxxxxxxx xxxxx xxxx xxx xxxxxx xxxxxxx $xx$xxxxx$$xx$ xxx $$xx$xxxxx$$xx$ $ $xx$xxxxx$$xx$ $ 0$ xxxxxxxx xx xxx xxxxxxxxxx xxxx xxxx xxx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx $xx$xxxxxx$$xx$ xx xxxxx xx xxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum number of characters to read.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxxxxxx xx xxxx.</target>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.&lt;/p&gt;\n</source>
          <target state="new">Xx xxx xxx xx xxx xxxxxx xx xxxxxxx xxxxxx xxx xxxxxxxxx xxxxxx xx xxxxxxxxxx xx xxxxxxx xxxx xxx xxxxxx$ xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A task that represents the asynchronous read operation.</source>
          <target state="new">$x$x$X xxxx xxxx xxxxxxxxxx xxx xxxxxxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.</source>
          <target state="new">Xxx xxxxx xx xxx $xx$XXxxxxx$$xx$ xxxxxxxxx xxxxxxxx xxx xxxxx xxxxxx xx xxxxx xxxx xxxx xxx xxxxxx.</target>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxx xxxxx xxx xx xxxx xxxx xxx xxxxxx xx xxxxx xxxxxxxxx xx xxx xxxxxx xx xxxxx xxxxxxxxx xxxxxxxxx xx xxxx xxxx xxx xxxxxxxxx xxxxxx$ xx xx xxx xx 0 $xxxx$ xx xxx xxx xx xxx xxxxxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx $xx$xxxxx$$xx$ xxx $xx$xxxxx$$xx$ xx xxxxxx xxxx xxx xxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxx xxx xxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reader is currently in use by a previous read operation.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxx xx xxx xx x xxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads a specified maximum number of characters from the current string asynchronously and writes the data to a buffer, beginning at the specified index.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx x xxxxxxxxx xxxxxxx xxxxxx xx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxx xxxxxxxxxxxxxx xxx xxxxxx xxx xxxx xx x xxxxxx$ xxxxxxxxx xx xxx xxxxxxxxx xxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxx xxxx xxxxxx xxxxxxx$ xxxxxxxx xxx xxxxxxxxx xxxxxxxxx xxxxx xxxx xxx xxxxxx xxxxxxx $xx$xxxxx$$xx$ xxx $$xx$xxxxx$$xx$ $ $xx$xxxxx$$xx$ $ 0$ xxxxxxxx xx xxx xxxxxxxxxx xxxx xxxx xxx xxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxxx xx $xx$xxxxxx$$xx$ xx xxxxx xx xxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The maximum number of characters to read.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxxxxxx xx xxxx.</target>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the end of the string is reached before the specified number of characters is written into the buffer, the method returns.&lt;/p&gt;\n</source>
          <target state="new">Xx xxx xxx xx xxx xxxxxx xx xxxxxxx xxxxxx xxx xxxxxxxxx xxxxxx xx xxxxxxxxxx xx xxxxxxx xxxx xxx xxxxxx$ xxx xxxxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A task that represents the asynchronous read operation.</source>
          <target state="new">$x$x$X xxxx xxxx xxxxxxxxxx xxx xxxxxxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.</source>
          <target state="new">Xxx xxxxx xx xxx $xx$XXxxxxx$$xx$ xxxxxxxxx xxxxxxxx xxx xxxxx xxxxxx xx xxxxx xxxx xxxx xxx xxxxxx.</target>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the string has been reached.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxxx xxxxx xxx xx xxxx xxxx xxx xxxxxx xx xxxxx xxxxxxxxx xx xxx xxxxxx xx xxxxx xxxxxxxxx xxxxxxxxx xx xxxx xxxx xxx xxxxxxxxx xxxxxx$ xx xx xxx xx 0 $xxxx$ xx xxx xxx xx xxx xxxxxx xxx xxxx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxxx$$xx$ xx $xxxxxx$xxxx$$xxxxxx$.$$x$$x</target>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\n</source>
          <target state="new">$x$x$$x$xx$xxxxx$$xx$ xx $xx$xxxxx$$xx$ xx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxx xx $xx$xxxxx$$xx$ xxx $xx$xxxxx$$xx$ xx xxxxxx xxxx xxx xxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxx xxx xxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reader is currently in use by a previous read operation.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxx xx xxx xx x xxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads a line of characters from the current string and returns the data as a string.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx x xxxx xx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxx xxx xxxxxxx xxx xxxx xx x xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The next line from the current string, or &lt;strong&gt;null&lt;/strong&gt; if the end of the string is reached.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxx xxxx xxxx xxx xxxxxxx xxxxxx$ xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxx xx xxx xxxxxx xx xxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The current reader is closed.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxx.</target>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="new">$x$x$Xxxxx xx xxxxxxxxxxxx xxxxxx xx xxxxxxxx x xxxxxx xxx xxx xxxxxxxx xxxxxx.</target>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads a line of characters asynchronously from the current string and returns the data as a string.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx x xxxx xx xxxxxxxxxx xxxxxxxxxxxxxx xxxx xxx xxxxxxx xxxxxx xxx xxxxxxx xxx xxxx xx x xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A task that represents the asynchronous read operation.</source>
          <target state="new">$x$x$X xxxx xxxx xxxxxxxxxx xxx xxxxxxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the next line from the string reader, or is &lt;strong&gt;null&lt;/strong&gt; if all the characters have been read.&lt;/p&gt;\n</source>
          <target state="new">Xxx xxxxx xx xxx $xx$XXxxxxx$$xx$ xxxxxxxxx xxxxxxxx xxx xxxx xxxx xxxx xxx xxxxxx xxxxxx$ xx xx $xxxxxx$xxxx$$xxxxxx$ xx xxx xxx xxxxxxxxxx xxxx xxxx xxxx.$$x$$x</target>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxx xxx xxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reader is currently in use by a previous read operation.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxx xx xxx xx x xxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads all characters from the current position to the end of the string and returns them as a single string.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxxxx xx xxx xxx xx xxx xxxxxx xxx xxxxxxx xxxx xx x xxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The content from the current position to the end of the underlying string.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxx xxx xxxxxxx xxxxxxxx xx xxx xxx xx xxx xxxxxxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.</source>
          <target state="new">$x$x$Xxxxx xx xxxxxxxxxxxx xxxxxx xx xxxxxxxx x xxxxxx xxx xxx xxxxxxxx xxxxxx.</target>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The current reader is closed.</source>
          <target state="new">$x$x$Xxx xxxxxxx xxxxxx xx xxxxxx.</target>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;Reads all characters from the current position to the end of the string asynchronously and returns them as a single string.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxxxx xxx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxxxx xx xxx xxx xx xxx xxxxxx xxxxxxxxxxxxxx xxx xxxxxxx xxxx xx x xxxxxx xxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A task that represents the asynchronous read operation.</source>
          <target state="new">$x$x$X xxxx xxxx xxxxxxxxxx xxx xxxxxxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains a string with the characters from the current position to the end of the string.</source>
          <target state="new">Xxx xxxxx xx xxx $xx$XXxxxxx$$xx$ xxxxxxxxx xxxxxxxx x xxxxxx xxxx xxx xxxxxxxxxx xxxx xxx xxxxxxx xxxxxxxx xx xxx xxx xx xxx xxxxxx.</target>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The string reader has been disposed.&lt;/p&gt;\n</source>
          <target state="new">$x$x$Xxx xxxxxx xxxxxx xxx xxxx xxxxxxxx.$$x$$x</target>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reader is currently in use by a previous read operation.</source>
          <target state="new">$x$x$Xxx xxxxxx xx xxxxxxxxx xx xxx xx x xxxxxxxx xxxx xxxxxxxxx.</target>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">$$x$$x</target>
        </trans-unit></group></body></file></xliff>