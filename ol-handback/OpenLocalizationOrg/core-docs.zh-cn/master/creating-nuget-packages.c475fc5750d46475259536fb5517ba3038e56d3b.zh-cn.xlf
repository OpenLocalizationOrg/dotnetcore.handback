<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2eac3c6a4071238bcd1bfebdd433710c4ad3d5b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\deploying\creating-nuget-packages.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3fa445ce30068eabf82340f3793e4a30979789b</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="new">Creating a NuGet Package with Cross Platform Tools</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating a NuGet Package with Cross Platform Tools</source>
          <target state="new">Creating a NuGet Package with Cross Platform Tools</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, NuGet</source>
          <target state="new">.NET, .NET Core, NuGet</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to Create a NuGet Package with Cross Platform Tools</source>
          <target state="new">How to Create a NuGet Package with Cross Platform Tools</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The following shows command-line samples using unix.</source>
          <target state="new"><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The following shows command-line samples using unix.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet pack`</ph> command as shown here works the same way on Windows.</source>
          <target state="new">The <ph id="ph1">`dotnet pack`</ph> command as shown here works the same way on Windows.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For .NET Core 1.0, libraries are expected to be distributed as NuGet packages.</source>
          <target state="new">For .NET Core 1.0, libraries are expected to be distributed as NuGet packages.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is in fact how all of the .NET Standard libraries are distributed and consumed.</source>
          <target state="new">This is in fact how all of the .NET Standard libraries are distributed and consumed.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is most easily done with the <ph id="ph1">`dotnet pack`</ph> command.</source>
          <target state="new">This is most easily done with the <ph id="ph1">`dotnet pack`</ph> command.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Imagine that you just wrote an awesome new library that you would like to distribute over NuGet.</source>
          <target state="new">Imagine that you just wrote an awesome new library that you would like to distribute over NuGet.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can create a NuGet package with cross platform tools to do exactly that!</source>
          <target state="new">You can create a NuGet package with cross platform tools to do exactly that!</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example assumes a library called <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept> which targets <ph id="ph1">`netstandard1.0`</ph>.</source>
          <target state="new">The following example assumes a library called <bpt id="p1">**</bpt>SuperAwesomeLibrary<ept id="p1">**</ept> which targets <ph id="ph1">`netstandard1.0`</ph>.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the <ph id="ph1">`dotnet restore`</ph> command before creating a NuGet package.</source>
          <target state="new">If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the <ph id="ph1">`dotnet restore`</ph> command before creating a NuGet package.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Failing to do so will result in the <ph id="ph1">`dotnet pack`</ph> command to not work properly.</source>
          <target state="new">Failing to do so will result in the <ph id="ph1">`dotnet pack`</ph> command to not work properly.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>After ensuring packages are restored, you can navigate to the directory where a library lives:</source>
          <target state="new">After ensuring packages are restored, you can navigate to the directory where a library lives:</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Then it's just a single command from the command line:</source>
          <target state="new">Then it's just a single command from the command line:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin/Debug`</ph> folder will now look like this:</source>
          <target state="new">Your <ph id="ph1">`/bin/Debug`</ph> folder will now look like this:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that this will produce a package which is capable of being debugged.</source>
          <target state="new">Note that this will produce a package which is capable of being debugged.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to build a NuGet package with release binaries, all you need to do is add the <ph id="ph1">`-c`/`--configuration`</ph> switch and use <ph id="ph2">`release`</ph> as the argument.</source>
          <target state="new">If you want to build a NuGet package with release binaries, all you need to do is add the <ph id="ph1">`-c`/`--configuration`</ph> switch and use <ph id="ph2">`release`</ph> as the argument.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">`/bin`</ph> folder will now have a <ph id="ph2">`release`</ph> folder containing your NuGet package with release binaries:</source>
          <target state="new">Your <ph id="ph1">`/bin`</ph> folder will now have a <ph id="ph2">`release`</ph> folder containing your NuGet package with release binaries:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>And now you have the necessary files to publish a NuGet package!</source>
          <target state="new">And now you have the necessary files to publish a NuGet package!</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Don't confuse <ph id="ph1">`dotnet pack`</ph> with</source>
          <target state="new">Don't confuse <ph id="ph1">`dotnet pack`</ph> with</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is important to note that at no point is the <ph id="ph1">`dotnet publish`</ph> command involved.</source>
          <target state="new">It is important to note that at no point is the <ph id="ph1">`dotnet publish`</ph> command involved.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.</source>
          <target state="new">The <ph id="ph1">`dotnet publish`</ph> command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>