<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2b45a76e55d082d39e1301809634903cca1a2f5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-with-dotnet-test.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19e23f20cf1a242bc27ea8e034f36b30a7fd628e</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="new">Unit Testing in .NET Core using dotnet test</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="new">Unit Testing in .NET Core using dotnet test</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unit Testing in .NET Core using dotnet test</source>
          <target state="new">Unit Testing in .NET Core using dotnet test</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></source>
          <target state="new">By <bpt id="p1">[</bpt>Steve Smith<ept id="p1">](http://ardalis.com)</ept> and <bpt id="p2">[</bpt>Bill Wagner<ept id="p2">](https://github.com/BillWagner)</ept></target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>View or download sample code</source>
          <target state="new">View or download sample code</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating the Projects</source>
          <target state="new">Creating the Projects</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</source>
          <target state="new"><bpt id="p1">[</bpt>Writing Libraries with Cross Platform Tools<ept id="p1">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This article follows those conventions.</source>
          <target state="new">This article follows those conventions.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The final project structure will be something like this:</source>
          <target state="new">The final project structure will be something like this:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the root directory, you'll need to create a <ph id="ph1">`global.json`</ph> that contains the names of your <ph id="ph2">`src`</ph> and <ph id="ph3">`test`</ph> directories:</source>
          <target state="new">In the root directory, you'll need to create a <ph id="ph1">`global.json`</ph> that contains the names of your <ph id="ph2">`src`</ph> and <ph id="ph3">`test`</ph> directories:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
          <target state="new">Creating the source project</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then, in the <ph id="ph1">`src`</ph> directory, create the <ph id="ph2">`PrimeService`</ph> directory.</source>
          <target state="new">Then, in the <ph id="ph1">`src`</ph> directory, create the <ph id="ph2">`PrimeService`</ph> directory.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CD into that directory, and run <ph id="ph1">`dotnet new`</ph> to create the source project.</source>
          <target state="new">CD into that directory, and run <ph id="ph1">`dotnet new`</ph> to create the source project.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet new`</ph> command creates a console application project, so you'll want to make a modification to <ph id="ph2">`project.json`</ph> so that you build a class library project.</source>
          <target state="new">The <ph id="ph1">`dotnet new`</ph> command creates a console application project, so you'll want to make a modification to <ph id="ph2">`project.json`</ph> so that you build a class library project.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>note: You can track <bpt id="p1">[</bpt>this issue<ept id="p1">](https://github.com/dotnet/cli/issues/2052)</ept> for other project types coming for the .NET Core SDK, including class libraries.</source>
          <target state="new">note: You can track <bpt id="p1">[</bpt>this issue<ept id="p1">](https://github.com/dotnet/cli/issues/2052)</ept> for other project types coming for the .NET Core SDK, including class libraries.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once this issue is addressed, you won't need to make these changes.</source>
          <target state="new">Once this issue is addressed, you won't need to make these changes.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Simply remove the <ph id="ph1">`buildOptions`</ph> node that instructs the compiler to emit the program entry point:</source>
          <target state="new">Simply remove the <ph id="ph1">`buildOptions`</ph> node that instructs the compiler to emit the program entry point:</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You'll also want to remove <ph id="ph1">`program.cs`</ph> and replace it with the class for the <ph id="ph2">`PrimeService`</ph>.</source>
          <target state="new">You'll also want to remove <ph id="ph1">`program.cs`</ph> and replace it with the class for the <ph id="ph2">`PrimeService`</ph>.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To use TDD, you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</source>
          <target state="new">To use TDD, you'll create a failing implementation of the <ph id="ph1">`PrimeService`</ph> class:</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
          <target state="new">Creating the test project</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Next, cd into the 'test' directory, and create the <ph id="ph1">`PrimeServices.Tests`</ph> directory.</source>
          <target state="new">Next, cd into the 'test' directory, and create the <ph id="ph1">`PrimeServices.Tests`</ph> directory.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>CD into the <ph id="ph1">`PrimeServices.Tests`</ph> directory and create a new project using <ph id="ph2">`dotnet new -t xunittest`</ph>.</source>
          <target state="new">CD into the <ph id="ph1">`PrimeServices.Tests`</ph> directory and create a new project using <ph id="ph2">`dotnet new -t xunittest`</ph>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>creates a test project that uses xunit as the test library.</source>
          <target state="new">creates a test project that uses xunit as the test library.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The generated template configured the test runner at the root of <ph id="ph1">`project.json`</ph>:</source>
          <target state="new">The generated template configured the test runner at the root of <ph id="ph1">`project.json`</ph>:</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The template also sets the framework node to use <ph id="ph1">`netcoreapp1.0`</ph>, and include the required imports to get xUnit.net to work with .NET Core RTM:</source>
          <target state="new">The template also sets the framework node to use <ph id="ph1">`netcoreapp1.0`</ph>, and include the required imports to get xUnit.net to work with .NET Core RTM:</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
          <target state="new">The test project requires other packages to create and run unit tests.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>added xunit, and the xunit runner.</source>
          <target state="new">added xunit, and the xunit runner.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You need to add the PrimeService package as another dependency to the project:</source>
          <target state="new">You need to add the PrimeService package as another dependency to the project:</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`PrimeService`</ph> project does not include any directory path information.</source>
          <target state="new">Notice that the <ph id="ph1">`PrimeService`</ph> project does not include any directory path information.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because you created the project structure to match the expected organization of <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph>, and the <ph id="ph3">`global.json`</ph> file indicates that, the build system will find the correct location for the project.</source>
          <target state="new">Because you created the project structure to match the expected organization of <ph id="ph1">`src`</ph> and <ph id="ph2">`test`</ph>, and the <ph id="ph3">`global.json`</ph> file indicates that, the build system will find the correct location for the project.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You add the <ph id="ph1">`"target": "project"`</ph> element to inform NuGet that it should look in project directories, not in the NuGet feed.</source>
          <target state="new">You add the <ph id="ph1">`"target": "project"`</ph> element to inform NuGet that it should look in project directories, not in the NuGet feed.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Without this key, you might download a package with the same name as your internal library.</source>
          <target state="new">Without this key, you might download a package with the same name as your internal library.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/project.json)</ept> on GitHub.</source>
          <target state="new">You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/project.json)</ept> on GitHub.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After this initial structure is in place, you can write your first test.</source>
          <target state="new">After this initial structure is in place, you can write your first test.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</source>
          <target state="new">Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
          <target state="new">Creating the first test</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</source>
          <target state="new">The TDD approach calls for writing one failing test, then making it pass, then repeating the process.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>So, let's write that one failing test.</source>
          <target state="new">So, let's write that one failing test.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remove <ph id="ph1">`program.cs`</ph> from the <ph id="ph2">`PrimeService.Tests`</ph> directory, and create a new C# file with the following content:</source>
          <target state="new">Remove <ph id="ph1">`program.cs`</ph> from the <ph id="ph2">`PrimeService.Tests`</ph> directory, and create a new C# file with the following content:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Fact]`</ph> attribute denotes a method as a single test.</source>
          <target state="new">The <ph id="ph1">`[Fact]`</ph> attribute denotes a method as a single test.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</source>
          <target state="new">Save this file, then run <ph id="ph1">`dotnet build`</ph> to build the test project.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</source>
          <target state="new">If you have not already built the <ph id="ph1">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</source>
          <target state="new">Now, execute <ph id="ph1">`dotnet test`</ph> to run the tests from the console.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The xunit test runner has the program entry point to run your tests from the Console.</source>
          <target state="new">The xunit test runner has the program entry point to run your tests from the Console.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.</source>
          <target state="new">starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Your test fails.</source>
          <target state="new">Your test fails.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
          <target state="new">You haven't created the implementation yet.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Write the simplest code to make this one test pass:</source>
          <target state="new">Write the simplest code to make this one test pass:</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Adding More Features</source>
          <target state="new">Adding More Features</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Now, that you've made one test pass, it's time to write more.</source>
          <target state="new">Now, that you've made one test pass, it's time to write more.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are a few other simple cases for prime numbers: 0, -1.</source>
          <target state="new">There are a few other simple cases for prime numbers: 0, -1.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You could add those as new tests, with the <ph id="ph1">`[Fact]`</ph> attribute, but that quickly becomes tedious.</source>
          <target state="new">You could add those as new tests, with the <ph id="ph1">`[Fact]`</ph> attribute, but that quickly becomes tedious.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>There are other xunit attributes that enable you to write a suite of similar tests.</source>
          <target state="new">There are other xunit attributes that enable you to write a suite of similar tests.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.</source>
          <target state="new">A <ph id="ph1">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`[InlineData]`</ph> attribute to specify values for those inputs.</source>
          <target state="new">You can use the <ph id="ph1">`[InlineData]`</ph> attribute to specify values for those inputs.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:</source>
          <target state="new">Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet test`</ph> and you'll see that two of these tests fail.</source>
          <target state="new">Run <ph id="ph1">`dotnet test`</ph> and you'll see that two of these tests fail.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can make them pass by changing the service.</source>
          <target state="new">You can make them pass by changing the service.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You need to change the <ph id="ph1">`if`</ph> clause at the beginning of the method:</source>
          <target state="new">You need to change the <ph id="ph1">`if`</ph> clause at the beginning of the method:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Now, these tests all pass.</source>
          <target state="new">Now, these tests all pass.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You continue to iterate by adding more tests, more theories, and more code in the main library.</source>
          <target state="new">You continue to iterate by adding more tests, more theories, and more code in the main library.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.</source>
          <target state="new">You'll quickly end up with the <bpt id="p1">[</bpt>finished version of the tests<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> and the <bpt id="p2">[</bpt>complete implementation of the library<ept id="p2">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
          <target state="new">You've built a small library and a set of unit tests for that library.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</source>
          <target state="new">You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The tools will run automatically.</source>
          <target state="new">The tools will run automatically.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>