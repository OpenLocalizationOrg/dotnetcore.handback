<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d193192b05982ffcdf5d36e34d678ae5f6f8c16b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\console-teleprompter.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1126ec70091bab969c1d510be7016210928a4abe</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Console Application</source>
          <target state="new">Console Application</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Console Application</source>
          <target state="new">Console Application</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Console Application</source>
          <target state="new">Console Application</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="new">Introduction</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you a number of features in .NET Core and the C# language.</source>
          <target state="new">This tutorial teaches you a number of features in .NET Core and the C# language.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You’ll learn:</source>
          <target state="new">You’ll learn:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The basics of the .NET Core Command Line Interface (CLI).</source>
          <target state="new">The basics of the .NET Core Command Line Interface (CLI).</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The structure of a C# Console Application.</source>
          <target state="new">The structure of a C# Console Application.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Console I/O.</source>
          <target state="new">Console I/O.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The basics of File I/O APIS in .NET Core</source>
          <target state="new">The basics of File I/O APIS in .NET Core</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The basics of the Task Asynchronous Programming Model in .NET Core.</source>
          <target state="new">The basics of the Task Asynchronous Programming Model in .NET Core.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You’ll build an application that reads a text file, and echoes the contents of that text file to the console.</source>
          <target state="new">You’ll build an application that reads a text file, and echoes the contents of that text file to the console.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The output to the console will be paced to match reading it aloud.</source>
          <target state="new">The output to the console will be paced to match reading it aloud.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can speed up or slow down the pace by pressing the ‘&lt;’ or ‘&gt;’ keys.</source>
          <target state="new">You can speed up or slow down the pace by pressing the ‘&lt;’ or ‘&gt;’ keys.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are a lot of features in this tutorial.</source>
          <target state="new">There are a lot of features in this tutorial.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Let’s build them one by one.</source>
          <target state="new">Let’s build them one by one.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
          <target state="new">Prerequisites</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You’ll need to setup your machine to run .NET core.</source>
          <target state="new">You’ll need to setup your machine to run .NET core.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
          <target state="new">You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can run this application on Windows, Linux, macOS or in a Docker container.</source>
          <target state="new">You can run this application on Windows, Linux, macOS or in a Docker container.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You’ll need to install your favorite code editor.</source>
          <target state="new">You’ll need to install your favorite code editor.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create the Application</source>
          <target state="new">Create the Application</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first step is to create a new application.</source>
          <target state="new">The first step is to create a new application.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Open a command prompt and create a new directory for your application.</source>
          <target state="new">Open a command prompt and create a new directory for your application.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Make that the current directory.</source>
          <target state="new">Make that the current directory.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Type the command "dotnet new" at the command prompt.</source>
          <target state="new">Type the command "dotnet new" at the command prompt.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This creates the starter files for a basic “Hello World” application.</source>
          <target state="new">This creates the starter files for a basic “Hello World” application.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Before you start making modifications, let’s go through the steps to run the simple Hello World application.</source>
          <target state="new">Before you start making modifications, let’s go through the steps to run the simple Hello World application.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>After creating the application, type "dotnet restore" at the command prompt.</source>
          <target state="new">After creating the application, type "dotnet restore" at the command prompt.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This command runs the NuGet package restore process.</source>
          <target state="new">This command runs the NuGet package restore process.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NuGet is a .NET package manager.</source>
          <target state="new">NuGet is a .NET package manager.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This command downloads any of the missing dependencies for your project.</source>
          <target state="new">This command downloads any of the missing dependencies for your project.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As this is a new project, none of the dependencies are in place, so the first run will download the .NET Core framework.</source>
          <target state="new">As this is a new project, none of the dependencies are in place, so the first run will download the .NET Core framework.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>After this initial step, you will only need to run dotnet restore when you add new dependent packages, or update the versions of any of your dependencies.</source>
          <target state="new">After this initial step, you will only need to run dotnet restore when you add new dependent packages, or update the versions of any of your dependencies.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This process also creates the project lock file (project.lock.json) in your project directory.</source>
          <target state="new">This process also creates the project lock file (project.lock.json) in your project directory.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This file helps to manage the project dependencies.</source>
          <target state="new">This file helps to manage the project dependencies.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It contains the local location of all the project dependencies.</source>
          <target state="new">It contains the local location of all the project dependencies.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You do not need to put the file in source control; it will be generated when you run “dotnet restore”.</source>
          <target state="new">You do not need to put the file in source control; it will be generated when you run “dotnet restore”.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After restoring packages, you run “dotnet build”.</source>
          <target state="new">After restoring packages, you run “dotnet build”.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This executes the build engine and creates your application executable.</source>
          <target state="new">This executes the build engine and creates your application executable.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Finally, you execute “dotnet run” to run your application.</source>
          <target state="new">Finally, you execute “dotnet run” to run your application.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The simple Hello World application code is all in Program.cs.</source>
          <target state="new">The simple Hello World application code is all in Program.cs.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Open that file with your favorite text editor.</source>
          <target state="new">Open that file with your favorite text editor.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We’re about to make our first changes.</source>
          <target state="new">We’re about to make our first changes.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>At the top of the file, see a using statement:</source>
          <target state="new">At the top of the file, see a using statement:</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This statement tells the compiler that any types from the System namespace are in scope.</source>
          <target state="new">This statement tells the compiler that any types from the System namespace are in scope.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Like other Object Oriented languages you may have used, C# uses namespaces to organize types.</source>
          <target state="new">Like other Object Oriented languages you may have used, C# uses namespaces to organize types.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This hello world program is no different.</source>
          <target state="new">This hello world program is no different.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can see that the program is enclosed in the <ph id="ph1">`ConsoleApplication`</ph> namespace.</source>
          <target state="new">You can see that the program is enclosed in the <ph id="ph1">`ConsoleApplication`</ph> namespace.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>That’s not a very descriptive name, so change it to <ph id="ph1">`TeleprompterConsole`</ph>.</source>
          <target state="new">That’s not a very descriptive name, so change it to <ph id="ph1">`TeleprompterConsole`</ph>.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Reading and Echoing the File</source>
          <target state="new">Reading and Echoing the File</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The first feature to add is to read a text file, and display all that text to the console.</source>
          <target state="new">The first feature to add is to read a text file, and display all that text to the console.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>First, let’s add a text file.</source>
          <target state="new">First, let’s add a text file.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">[</bpt>sampleQuotes.txt<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/csharp-language/console-teleprompter/sampleQuotes.txt)</ept> file from the GitHub repository for this <bpt id="p2">[</bpt>sample<ept id="p2">](https://github.com/dotnet/core-docs/tree/master/samples/csharp-language/console-teleprompter)</ept> into your project directory.</source>
          <target state="new">Copy the <bpt id="p1">[</bpt>sampleQuotes.txt<ept id="p1">](https://github.com/dotnet/core-docs/blob/master/samples/csharp-language/console-teleprompter/sampleQuotes.txt)</ept> file from the GitHub repository for this <bpt id="p2">[</bpt>sample<ept id="p2">](https://github.com/dotnet/core-docs/tree/master/samples/csharp-language/console-teleprompter)</ept> into your project directory.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This will serve as the script for your application.</source>
          <target state="new">This will serve as the script for your application.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Next, add the following method in your Program class (right below the Main method):</source>
          <target state="new">Next, add the following method in your Program class (right below the Main method):</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This method uses types from two new namespaces.</source>
          <target state="new">This method uses types from two new namespaces.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For this to compile you’ll need to add the following two lines to the top of the file:</source>
          <target state="new">For this to compile you’ll need to add the following two lines to the top of the file:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IEnumerable&lt;T&gt;`</ph> interface is defined in the <ph id="ph2">`System.Collections.Generic`</ph> namespace.</source>
          <target state="new">The <ph id="ph1">`IEnumerable&lt;T&gt;`</ph> interface is defined in the <ph id="ph2">`System.Collections.Generic`</ph> namespace.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The File class is defined in the <ph id="ph1">`System.IO namespace`</ph>.</source>
          <target state="new">The File class is defined in the <ph id="ph1">`System.IO namespace`</ph>.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This method is a special type of C# method called an <bpt id="p1">*</bpt>Enumerator method<ept id="p1">*</ept>.</source>
          <target state="new">This method is a special type of C# method called an <bpt id="p1">*</bpt>Enumerator method<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enumerator methods return sequences that are evaluated lazily.</source>
          <target state="new">Enumerator methods return sequences that are evaluated lazily.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>That means each item in the sequence is generated as it is requested by the code consuming the sequence.</source>
          <target state="new">That means each item in the sequence is generated as it is requested by the code consuming the sequence.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Enumerator methods are methods that contain one or more <ph id="ph1">`yield return`</ph> statements.</source>
          <target state="new">Enumerator methods are methods that contain one or more <ph id="ph1">`yield return`</ph> statements.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The object returned by the <ph id="ph1">`ReadFrom()`</ph> method contains the code to generate each item in the sequence.</source>
          <target state="new">The object returned by the <ph id="ph1">`ReadFrom()`</ph> method contains the code to generate each item in the sequence.</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In this example, that involves reading the next line of text from the source file, and returning that string.</source>
          <target state="new">In this example, that involves reading the next line of text from the source file, and returning that string.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Each time the calling code requests the next item from the sequence, the code reads the next line of text from the file and returns it.</source>
          <target state="new">Each time the calling code requests the next item from the sequence, the code reads the next line of text from the file and returns it.</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When the file has been completely read, the sequence indicates that there are no more items.</source>
          <target state="new">When the file has been completely read, the sequence indicates that there are no more items.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There are two other C# syntax elements that may be new to you.</source>
          <target state="new">There are two other C# syntax elements that may be new to you.</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`using`</ph> statement in this method manages resource cleanup.</source>
          <target state="new">The <ph id="ph1">`using`</ph> statement in this method manages resource cleanup.</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The variable that is initialized in the using statement (<ph id="ph1">`reader`</ph>, in this example) must implement the <ph id="ph2">`IDisposable`</ph> interface.</source>
          <target state="new">The variable that is initialized in the using statement (<ph id="ph1">`reader`</ph>, in this example) must implement the <ph id="ph2">`IDisposable`</ph> interface.</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDisposable`</ph> interface defines a single method, <ph id="ph2">`Dispose()`</ph>, that should be called when the resource should be released.</source>
          <target state="new">The <ph id="ph1">`IDisposable`</ph> interface defines a single method, <ph id="ph2">`Dispose()`</ph>, that should be called when the resource should be released.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The compiler generates that call when execution reaches the closing brace of the <ph id="ph1">`using`</ph> statement.</source>
          <target state="new">The compiler generates that call when execution reaches the closing brace of the <ph id="ph1">`using`</ph> statement.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The compiler-generated code ensures that the resource is released even if an exception is thrown from the code in the block defined by the using statement.</source>
          <target state="new">The compiler-generated code ensures that the resource is released even if an exception is thrown from the code in the block defined by the using statement.</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The reader variable is defined using the <ph id="ph1">`var`</ph> keyword.</source>
          <target state="new">The reader variable is defined using the <ph id="ph1">`var`</ph> keyword.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>defines an <bpt id="p1">*</bpt>implicitly typed local variable<ept id="p1">*</ept>.</source>
          <target state="new">defines an <bpt id="p1">*</bpt>implicitly typed local variable<ept id="p1">*</ept>.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>That means the type of the variable is determined by the compile time type of the object assigned to the variable.</source>
          <target state="new">That means the type of the variable is determined by the compile time type of the object assigned to the variable.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Here, that is the return value from <ph id="ph1">`File.OpenText()`</ph>, which is a <ph id="ph2">`StreamReader`</ph> object.</source>
          <target state="new">Here, that is the return value from <ph id="ph1">`File.OpenText()`</ph>, which is a <ph id="ph2">`StreamReader`</ph> object.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Now, let’s fill in the code to read the file in the Main method:</source>
          <target state="new">Now, let’s fill in the code to read the file in the Main method:</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Run the program (using "dotnet run" and you can see every line printed out to the console.</source>
          <target state="new">Run the program (using "dotnet run" and you can see every line printed out to the console.</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Adding Delays and Formatting output</source>
          <target state="new">Adding Delays and Formatting output</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>What you have is being displayed far too fast to read aloud.</source>
          <target state="new">What you have is being displayed far too fast to read aloud.</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Now you need to add the delays in the output.</source>
          <target state="new">Now you need to add the delays in the output.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>As you start, you’ll be building some of the core code that enables asynchronous processing.</source>
          <target state="new">As you start, you’ll be building some of the core code that enables asynchronous processing.</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, these first steps will follow a few anti-patterns.</source>
          <target state="new">However, these first steps will follow a few anti-patterns.</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The anti-patterns are pointed out in comments as you add the code, and the code will be updated in later steps.</source>
          <target state="new">The anti-patterns are pointed out in comments as you add the code, and the code will be updated in later steps.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>There are two steps to this section.</source>
          <target state="new">There are two steps to this section.</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>First, you’ll update the iterator method to return single words instead of entire lines.</source>
          <target state="new">First, you’ll update the iterator method to return single words instead of entire lines.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>That’s done with these modifications.</source>
          <target state="new">That’s done with these modifications.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`yield return line;`</ph> statement with the following code:</source>
          <target state="new">Replace the <ph id="ph1">`yield return line;`</ph> statement with the following code:</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Next, you need to modify how you consume the lines of the file, and add a delay after writing each word.</source>
          <target state="new">Next, you need to modify how you consume the lines of the file, and add a delay after writing each word.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`Console.WriteLine()`</ph> statement in the <ph id="ph2">`Main`</ph> method with the following block:</source>
          <target state="new">Replace the <ph id="ph1">`Console.WriteLine()`</ph> statement in the <ph id="ph2">`Main`</ph> method with the following block:</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Task`</ph> class is in the <ph id="ph2">`System.Threading.Tasks`</ph> namespace, so you need to add that using statement at the top of file:</source>
          <target state="new">The <ph id="ph1">`Task`</ph> class is in the <ph id="ph2">`System.Threading.Tasks`</ph> namespace, so you need to add that using statement at the top of file:</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Note: In RC2, you need to run the application using a different command to see the correct output.</source>
          <target state="new">Note: In RC2, you need to run the application using a different command to see the correct output.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This is due to an issue in the CLI that <bpt id="p1">[</bpt>has been filed<ept id="p1">](https://github.com/dotnet/cli/issues/2976)</ept>.</source>
          <target state="new">This is due to an issue in the CLI that <bpt id="p1">[</bpt>has been filed<ept id="p1">](https://github.com/dotnet/cli/issues/2976)</ept>.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To run the application, instead of <ph id="ph1">`dotnet run`</ph> use <ph id="ph2">`dotnet .\bin\Debug\netcoreapp1.0\console-teleprompter.dll`</ph> substituting the correct path to your output DLL.</source>
          <target state="new">To run the application, instead of <ph id="ph1">`dotnet run`</ph> use <ph id="ph2">`dotnet .\bin\Debug\netcoreapp1.0\console-teleprompter.dll`</ph> substituting the correct path to your output DLL.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Run the sample, and check the output.</source>
          <target state="new">Run the sample, and check the output.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Now, each single word is printed, followed by a 200 ms delay.</source>
          <target state="new">Now, each single word is printed, followed by a 200 ms delay.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, the displayed output shows some issues because the source text file has several lines that have more than 80 characters without a line break.</source>
          <target state="new">However, the displayed output shows some issues because the source text file has several lines that have more than 80 characters without a line break.</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>That can be hard to read while it's scrolling by.</source>
          <target state="new">That can be hard to read while it's scrolling by.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>That’s easy to fix.</source>
          <target state="new">That’s easy to fix.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>You’ll just keep track of the length of each line, and generate a new line whenever the line length reaches a certain threshold.</source>
          <target state="new">You’ll just keep track of the length of each line, and generate a new line whenever the line length reaches a certain threshold.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Declare a local variable after the declaration of <ph id="ph1">`words`</ph> that holds the line length:</source>
          <target state="new">Declare a local variable after the declaration of <ph id="ph1">`words`</ph> that holds the line length:</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Then, add the following code after the <ph id="ph1">`yield return word;`</ph> statement (before the closing brace):</source>
          <target state="new">Then, add the following code after the <ph id="ph1">`yield return word;`</ph> statement (before the closing brace):</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Run the sample, and you’ll be able to read aloud at its pre-configured pace.</source>
          <target state="new">Run the sample, and you’ll be able to read aloud at its pre-configured pace.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Async Tasks</source>
          <target state="new">Async Tasks</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this final step, you’ll add the code to write the output asynchronously in one task, while also running another task to read input from the user if they want to speed up or slow down the text display.</source>
          <target state="new">In this final step, you’ll add the code to write the output asynchronously in one task, while also running another task to read input from the user if they want to speed up or slow down the text display.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This has a few steps in it and by the end, you’ll have all the updates that you need.</source>
          <target state="new">This has a few steps in it and by the end, you’ll have all the updates that you need.</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The first step is to create an asynchronous <ph id="ph1">`Task`</ph> returning method that represents the code you’ve created so far to read and display the file.</source>
          <target state="new">The first step is to create an asynchronous <ph id="ph1">`Task`</ph> returning method that represents the code you’ve created so far to read and display the file.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Add this method to your Program class: (It’s taken from the body of your Main method:</source>
          <target state="new">Add this method to your Program class: (It’s taken from the body of your Main method:</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You’ll notice two changes.</source>
          <target state="new">You’ll notice two changes.</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>First, in the body of the method, instead of calling <ph id="ph1">`Wait()`</ph> to synchronously wait for a task to finish, this version uses the <ph id="ph2">`await`</ph> keyword.</source>
          <target state="new">First, in the body of the method, instead of calling <ph id="ph1">`Wait()`</ph> to synchronously wait for a task to finish, this version uses the <ph id="ph2">`await`</ph> keyword.</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In order to do that, you need to add the <ph id="ph1">`async`</ph> modifier to the method signature.</source>
          <target state="new">In order to do that, you need to add the <ph id="ph1">`async`</ph> modifier to the method signature.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">`Task`</ph>.</source>
          <target state="new">This method returns a <ph id="ph1">`Task`</ph>.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Notice that there are no return statements that return a Task object.</source>
          <target state="new">Notice that there are no return statements that return a Task object.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Instead, that <ph id="ph1">`Task`</ph> object is created by code the compiler generates when you use the <ph id="ph2">`await`</ph> operator.</source>
          <target state="new">Instead, that <ph id="ph1">`Task`</ph> object is created by code the compiler generates when you use the <ph id="ph2">`await`</ph> operator.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can imagine that this method returns when it reaches an <ph id="ph1">`await`</ph>.</source>
          <target state="new">You can imagine that this method returns when it reaches an <ph id="ph1">`await`</ph>.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The returned Task indicates that the work has not completed.</source>
          <target state="new">The returned Task indicates that the work has not completed.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The method resumes when the awaited task completes.</source>
          <target state="new">The method resumes when the awaited task completes.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When it has executed to completion, the returned <ph id="ph1">`Task`</ph> indicates that it is complete.</source>
          <target state="new">When it has executed to completion, the returned <ph id="ph1">`Task`</ph> indicates that it is complete.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Calling code can monitor that returned task to determine when it has completed.</source>
          <target state="new">Calling code can monitor that returned task to determine when it has completed.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can call this new method in your Main program:</source>
          <target state="new">You can call this new method in your Main program:</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Here, in <ph id="ph1">`Main()`</ph>, the code does synchronously wait.</source>
          <target state="new">Here, in <ph id="ph1">`Main()`</ph>, the code does synchronously wait.</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You should use the <ph id="ph1">`await`</ph> operator instead of synchronously waiting whenever possible.</source>
          <target state="new">You should use the <ph id="ph1">`await`</ph> operator instead of synchronously waiting whenever possible.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>But, in a console application’s <ph id="ph1">`Main`</ph> method, you cannot use the <ph id="ph2">`await`</ph> operator.</source>
          <target state="new">But, in a console application’s <ph id="ph1">`Main`</ph> method, you cannot use the <ph id="ph2">`await`</ph> operator.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>That would result in the application exiting before all tasks have completed.</source>
          <target state="new">That would result in the application exiting before all tasks have completed.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Next, you need to write the second asynchronous method to read from the Console and watch for the ‘&lt;’ and ‘&gt;’ keys.</source>
          <target state="new">Next, you need to write the second asynchronous method to read from the Console and watch for the ‘&lt;’ and ‘&gt;’ keys.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Here’s the method you add for that task:</source>
          <target state="new">Here’s the method you add for that task:</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This creates a lambda expression to represent an <ph id="ph1">`Action`</ph> that reads a key from the Console and modifies a local variable representing the delay when the user presses the ‘&lt;’ or ‘&gt;’ keys.</source>
          <target state="new">This creates a lambda expression to represent an <ph id="ph1">`Action`</ph> that reads a key from the Console and modifies a local variable representing the delay when the user presses the ‘&lt;’ or ‘&gt;’ keys.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This method uses <ph id="ph1">`Console.ReadKey()`</ph> to block and wait for the user to press a key.</source>
          <target state="new">This method uses <ph id="ph1">`Console.ReadKey()`</ph> to block and wait for the user to press a key.</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To finish this feature, you need to create a new async task returning method that starts both of these tasks (<ph id="ph1">`GetInput()`</ph> and <ph id="ph2">`ShowTeleprompter()`</ph>, and also manage the shared data between these two tasks.</source>
          <target state="new">To finish this feature, you need to create a new async task returning method that starts both of these tasks (<ph id="ph1">`GetInput()`</ph> and <ph id="ph2">`ShowTeleprompter()`</ph>, and also manage the shared data between these two tasks.</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It’s time to create a class that can handle the shared data between these two tasks.</source>
          <target state="new">It’s time to create a class that can handle the shared data between these two tasks.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This class contains two public properties: the delay, and a flag to indicate that the file has been completely read:</source>
          <target state="new">This class contains two public properties: the delay, and a flag to indicate that the file has been completely read:</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Put that class in a new file, and enclose that class in the <ph id="ph1">`TeleprompterConsole`</ph> namespace as shown above.</source>
          <target state="new">Put that class in a new file, and enclose that class in the <ph id="ph1">`TeleprompterConsole`</ph> namespace as shown above.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You’ll also need to add a <ph id="ph1">`static using`</ph> statement so that you can reference the <ph id="ph2">`Min`</ph> and <ph id="ph3">`Max`</ph> method without the enclosing class or namespace names.</source>
          <target state="new">You’ll also need to add a <ph id="ph1">`static using`</ph> statement so that you can reference the <ph id="ph2">`Min`</ph> and <ph id="ph3">`Max`</ph> method without the enclosing class or namespace names.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>A static using statement imports the methods from one class.</source>
          <target state="new">A static using statement imports the methods from one class.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This is in contrast with the using statements used up to this point that have imported all classes from a namespace.</source>
          <target state="new">This is in contrast with the using statements used up to this point that have imported all classes from a namespace.</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The other language feature that’s new is the <ph id="ph1">`lock`</ph> statement.</source>
          <target state="new">The other language feature that’s new is the <ph id="ph1">`lock`</ph> statement.</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This statement ensures that only a single thread can be in that code at any given time.</source>
          <target state="new">This statement ensures that only a single thread can be in that code at any given time.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If one thread is in the locked section, other threads must wait for the first thread to exit that section.</source>
          <target state="new">If one thread is in the locked section, other threads must wait for the first thread to exit that section.</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The lock statement uses an object that guards the lock section.</source>
          <target state="new">The lock statement uses an object that guards the lock section.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This class follows a standard idiom to lock a private object in the class.</source>
          <target state="new">This class follows a standard idiom to lock a private object in the class.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Next, you need to update the <ph id="ph1">`ShowTeleprompter`</ph> and <ph id="ph2">`GetInput`</ph> methods to use the new config object.</source>
          <target state="new">Next, you need to update the <ph id="ph1">`ShowTeleprompter`</ph> and <ph id="ph2">`GetInput`</ph> methods to use the new config object.</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Write one final Task returning async method to start both tasks and exit when the first task finishes:</source>
          <target state="new">Write one final Task returning async method to start both tasks and exit when the first task finishes:</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The one new method here is the <ph id="ph1">`Task.WhenAny()`</ph> call.</source>
          <target state="new">The one new method here is the <ph id="ph1">`Task.WhenAny()`</ph> call.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>That creates a Task that finishes as soon as any of the tasks in its argument list completes.</source>
          <target state="new">That creates a Task that finishes as soon as any of the tasks in its argument list completes.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Next, you need to update both the ShowTeleprompter and GetInput methods to use the config object for the delay:</source>
          <target state="new">Next, you need to update both the ShowTeleprompter and GetInput methods to use the config object for the delay:</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This new version of <ph id="ph1">`ShowTeleprompter`</ph> calls a new method in the <ph id="ph2">`TeleprompterConfig`</ph> class.</source>
          <target state="new">This new version of <ph id="ph1">`ShowTeleprompter`</ph> calls a new method in the <ph id="ph2">`TeleprompterConfig`</ph> class.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Now, you need to update Main to call <ph id="ph1">`RunTeleprompter`</ph> instead of <ph id="ph2">`ShowTeleprompter`</ph>:</source>
          <target state="new">Now, you need to update Main to call <ph id="ph1">`RunTeleprompter`</ph> instead of <ph id="ph2">`ShowTeleprompter`</ph>:</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>To finish, you'll need to add the <ph id="ph1">`SetDone`</ph> method, and the <ph id="ph2">`Done`</ph> property to the <ph id="ph3">`TelePrompterConfig`</ph> class:</source>
          <target state="new">To finish, you'll need to add the <ph id="ph1">`SetDone`</ph> method, and the <ph id="ph2">`Done`</ph> property to the <ph id="ph3">`TelePrompterConfig`</ph> class:</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="new">Conclusion</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This tutorial showed you a number of the features around the C# language and the .NET Core libraries related to working in Console applications.</source>
          <target state="new">This tutorial showed you a number of the features around the C# language and the .NET Core libraries related to working in Console applications.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You can build on this knowledge to explore more about the language, and the classes introduced here.</source>
          <target state="new">You can build on this knowledge to explore more about the language, and the classes introduced here.</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You’ve seen the basics of File and Console I/O, blocking and non-blocking use of the Task based Asynchronous programming model, a tour of the C# language and how C# programs are organized and the .NET Core Command Line Interface and tools.</source>
          <target state="new">You’ve seen the basics of File and Console I/O, blocking and non-blocking use of the Task based Asynchronous programming model, a tour of the C# language and how C# programs are organized and the .NET Core Command Line Interface and tools.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>