<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb398b38d8a37f203619e026b0e6aefa0575a775</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\about\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97057d1fa918d86d47b08bdc3e55389b3bb194e2</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>About .NET</source>
          <target state="new">About .NET</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Products</source>
          <target state="new">.NET Products</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>About .NET</source>
          <target state="new">About .NET</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Check out the <bpt id="p1">[</bpt>"Getting Started with .NET Core" tutorials<ept id="p1">](../core/getting-started.md)</ept> to learn how to create a simple .NET Core application.</source>
          <target state="new">Check out the <bpt id="p1">[</bpt>"Getting Started with .NET Core" tutorials<ept id="p1">](../core/getting-started.md)</ept> to learn how to create a simple .NET Core application.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It only takes a few minutes to get your first app up and running.</source>
          <target state="new">It only takes a few minutes to get your first app up and running.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET is a general purpose development platform.</source>
          <target state="new">.NET is a general purpose development platform.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It can be used for any kind of app type or workload where general purpose solutions are used.</source>
          <target state="new">It can be used for any kind of app type or workload where general purpose solutions are used.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It has several key features that are attractive to many developers, including automatic memory management and modern programming languages, that make it easier to efficiently build high-quality applications.</source>
          <target state="new">It has several key features that are attractive to many developers, including automatic memory management and modern programming languages, that make it easier to efficiently build high-quality applications.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>.NET enables a high-level programming environment with many convenience features, while providing low-level access to native memory and APIs.</source>
          <target state="new">.NET enables a high-level programming environment with many convenience features, while providing low-level access to native memory and APIs.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>C#, F# and Visual Basic are popular languages that target and rely on the .NET platform.</source>
          <target state="new">C#, F# and Visual Basic are popular languages that target and rely on the .NET platform.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The .NET languages are known for key features such as their asynchronous programming model, language-integrated query, generic types and type system reflection.</source>
          <target state="new">The .NET languages are known for key features such as their asynchronous programming model, language-integrated query, generic types and type system reflection.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The languages also provide great options for both object-oriented and functional programming paradigms.</source>
          <target state="new">The languages also provide great options for both object-oriented and functional programming paradigms.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There is great diversity across these languages, in philosophy and syntax, but also symmetry provided by a shared type system.</source>
          <target state="new">There is great diversity across these languages, in philosophy and syntax, but also symmetry provided by a shared type system.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type system is provided by the underlying runtime environment.</source>
          <target state="new">This type system is provided by the underlying runtime environment.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>.NET was designed around the idea of a "common language runtime" that could support the requirements of diverse languages -- for example, dynamic and statically typed languages -- and enable interoperability between them.</source>
          <target state="new">.NET was designed around the idea of a "common language runtime" that could support the requirements of diverse languages -- for example, dynamic and statically typed languages -- and enable interoperability between them.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, it's possible to pass a collection of <ph id="ph1">`People`</ph> objects between languages with no loss in semantics or capability.</source>
          <target state="new">For example, it's possible to pass a collection of <ph id="ph1">`People`</ph> objects between languages with no loss in semantics or capability.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Multiple <bpt id="p1">[</bpt>.NET implementations and products<ept id="p1">](products.md)</ept> are available, based on open <bpt id="p2">[</bpt>.NET Standards<ept id="p2">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that specify the fundamentals of the platform.</source>
          <target state="new">Multiple <bpt id="p1">[</bpt>.NET implementations and products<ept id="p1">](products.md)</ept> are available, based on open <bpt id="p2">[</bpt>.NET Standards<ept id="p2">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that specify the fundamentals of the platform.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>They are separately optimized for different application types (for example, desktop, mobile, gaming, cloud) and support many chips (e.g. x86/x64, ARM) and operating systems (e.g. Windows, Linux, iOS, Android, macOS).</source>
          <target state="new">They are separately optimized for different application types (for example, desktop, mobile, gaming, cloud) and support many chips (e.g. x86/x64, ARM) and operating systems (e.g. Windows, Linux, iOS, Android, macOS).</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Open source is also an important part of the .NET ecosystem, with multiple .NET implementations and many libraries available under OSI-approved licenses.</source>
          <target state="new">Open source is also an important part of the .NET ecosystem, with multiple .NET implementations and many libraries available under OSI-approved licenses.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">[</bpt>.NET<ept id="p1">](../standard/index.md)</ept></source>
          <target state="new">Learn about <bpt id="p1">[</bpt>.NET<ept id="p1">](../standard/index.md)</ept></target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">[</bpt>C#<ept id="p1">](../csharp/index.md)</ept></source>
          <target state="new">Learn about <bpt id="p1">[</bpt>C#<ept id="p1">](../csharp/index.md)</ept></target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Learn about <bpt id="p1">[</bpt>F#<ept id="p1">](../fsharp/index.md)</ept></source>
          <target state="new">Learn about <bpt id="p1">[</bpt>F#<ept id="p1">](../fsharp/index.md)</ept></target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Browse the <bpt id="p1">[</bpt>.NET API Library<ept id="p1">](../../api/index.md)</ept></source>
          <target state="new">Browse the <bpt id="p1">[</bpt>.NET API Library<ept id="p1">](../../api/index.md)</ept></target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Introduction to the Common Language Runtime</source>
          <target state="new">Introduction to the Common Language Runtime</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Fundamentals</source>
          <target state="new">Fundamentals</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multi-Language<ept id="p1">**</ept> -- .NET provides a well-defined type system, file formats, runtime, framework and tools that can be used by multiple languages, both for their own execution and also to interoperate with other languages using those same components of .NET as their shared currency.</source>
          <target state="new"><bpt id="p1">**</bpt>Multi-Language<ept id="p1">**</ept> -- .NET provides a well-defined type system, file formats, runtime, framework and tools that can be used by multiple languages, both for their own execution and also to interoperate with other languages using those same components of .NET as their shared currency.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Managed Memory<ept id="p1">**</ept> -- .NET automatically manages memory for you via a garbage collector.</source>
          <target state="new"><bpt id="p1">**</bpt>Managed Memory<ept id="p1">**</ept> -- .NET automatically manages memory for you via a garbage collector.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It ensures that you always reference live objects, guaranteeing that you avoid nasty problems like buffer overruns and access violations.</source>
          <target state="new">It ensures that you always reference live objects, guaranteeing that you avoid nasty problems like buffer overruns and access violations.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This includes array bounds checking.</source>
          <target state="new">This includes array bounds checking.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Safety<ept id="p1">**</ept> -- The primary .NET model for functionality and memory representation is "types".</source>
          <target state="new"><bpt id="p1">**</bpt>Type Safety<ept id="p1">**</ept> -- The primary .NET model for functionality and memory representation is "types".</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Types define shape and optionally behavior.</source>
          <target state="new">Types define shape and optionally behavior.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The runtime ensures that calling code can only operate on types according to their definition and specified visibility of members, providing consistent, reliable and secure results.</source>
          <target state="new">The runtime ensures that calling code can only operate on types according to their definition and specified visibility of members, providing consistent, reliable and secure results.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="new">Features</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>User-defined Value Types<ept id="p1">**</ept> -- Value types are a useful category of types since they offer the semantic of "pass by value" instead of "pass by reference", as is the case for classes.</source>
          <target state="new"><bpt id="p1">**</bpt>User-defined Value Types<ept id="p1">**</ept> -- Value types are a useful category of types since they offer the semantic of "pass by value" instead of "pass by reference", as is the case for classes.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Value types are most obviously usefully for numeric data.</source>
          <target state="new">Value types are most obviously usefully for numeric data.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>.NET enables value types for both primitive types, like integers, and user-defined types.</source>
          <target state="new">.NET enables value types for both primitive types, like integers, and user-defined types.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Generic types<ept id="p1">**</ept> -- Generic types are types with one or more type parameters that can be specified on a per-instantiation basis.</source>
          <target state="new"><bpt id="p1">**</bpt>Generic types<ept id="p1">**</ept> -- Generic types are types with one or more type parameters that can be specified on a per-instantiation basis.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is useful for many types, which otherwise would  expose contents as the Object type or require multiple type definitions.</source>
          <target state="new">This is useful for many types, which otherwise would  expose contents as the Object type or require multiple type definitions.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, a given instantiation of a collection type can be made specific to People, GPS locations or strings.</source>
          <target state="new">For example, a given instantiation of a collection type can be made specific to People, GPS locations or strings.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reflection<ept id="p1">**</ept> -- .NET defines a metadata format that describes the types within a binary.</source>
          <target state="new"><bpt id="p1">**</bpt>Reflection<ept id="p1">**</ept> -- .NET defines a metadata format that describes the types within a binary.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The reflection subsystem uses this data, exposing APIs for both reading and instantiating types at runtime.</source>
          <target state="new">The reflection subsystem uses this data, exposing APIs for both reading and instantiating types at runtime.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This facility is very useful for dynamic scenarios where it is not convenient to know the exact implementation of a program ahead of time.</source>
          <target state="new">This facility is very useful for dynamic scenarios where it is not convenient to know the exact implementation of a program ahead of time.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Flexible code generation<ept id="p1">**</ept> -- .NET does not prescribe a specific approach to transforming .NET binaries into machine code.</source>
          <target state="new"><bpt id="p1">**</bpt>Flexible code generation<ept id="p1">**</ept> -- .NET does not prescribe a specific approach to transforming .NET binaries into machine code.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Many approaches have been used successfully, including interpretation, just-in-time (JIT) compilation, ahead-of-time (AOT) compilation with JIT fallback and AOT compilation with no JIT fallback.</source>
          <target state="new">Many approaches have been used successfully, including interpretation, just-in-time (JIT) compilation, ahead-of-time (AOT) compilation with JIT fallback and AOT compilation with no JIT fallback.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each of these strategies can be valuable and there are opportunities for using them together.</source>
          <target state="new">Each of these strategies can be valuable and there are opportunities for using them together.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cross-platform<ept id="p1">**</ept> -- .NET was intended to be cross platform from its inception.</source>
          <target state="new"><bpt id="p1">**</bpt>Cross-platform<ept id="p1">**</ept> -- .NET was intended to be cross platform from its inception.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The binary format and the instruction set are operating system, CPU and pointer-size agnostic.</source>
          <target state="new">The binary format and the instruction set are operating system, CPU and pointer-size agnostic.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A given .NET binary built in 2000 to run on a 32-bit Windows machine can run on the ARM64 iOS device on 2016 without modification.</source>
          <target state="new">A given .NET binary built in 2000 to run on a 32-bit Windows machine can run on the ARM64 iOS device on 2016 without modification.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Open source</source>
          <target state="new">Open source</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> and <bpt id="p2">[</bpt>Mono<ept id="p2">](https://github.com/mono/mono)</ept> implementations of .NET are open source, using the MIT license.</source>
          <target state="new">The <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://github.com/dotnet/core)</ept> and <bpt id="p2">[</bpt>Mono<ept id="p2">](https://github.com/mono/mono)</ept> implementations of .NET are open source, using the MIT license.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Documentation uses the <bpt id="p1">[</bpt>Creative Commons CC-BY<ept id="p1">](https://creativecommons.org/licenses/by/4.0/)</ept> license.</source>
          <target state="new">Documentation uses the <bpt id="p1">[</bpt>Creative Commons CC-BY<ept id="p1">](https://creativecommons.org/licenses/by/4.0/)</ept> license.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Core and Mono are sponsored by Microsoft and have many contributers from the community.</source>
          <target state="new">.NET Core and Mono are sponsored by Microsoft and have many contributers from the community.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These general purpose runtimes can be used as the basis of academic research or teaching/learning or commercial products.</source>
          <target state="new">These general purpose runtimes can be used as the basis of academic research or teaching/learning or commercial products.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Their open nature also means that anyone can contribute back to the upstream product code given a bug or the desire for a new feature.</source>
          <target state="new">Their open nature also means that anyone can contribute back to the upstream product code given a bug or the desire for a new feature.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Projects</source>
          <target state="new">Projects</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET runtime, used by .NET Core.</source>
          <target state="new"><bpt id="p1">[</bpt>CoreCLR<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET runtime, used by .NET Core.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mono<ept id="p1">](https://github.com/mono/mono)</ept> - .NET runtime, used by Xamarin and others.</source>
          <target state="new"><bpt id="p1">[</bpt>Mono<ept id="p1">](https://github.com/mono/mono)</ept> - .NET runtime, used by Xamarin and others.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET class libraries, used by .NET Core and to a degree by Mono via source sharing.</source>
          <target state="new"><bpt id="p1">[</bpt>CoreFX<ept id="p1">](https://github.com/dotnet/coreclr)</ept> - .NET class libraries, used by .NET Core and to a degree by Mono via source sharing.</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Roslyn<ept id="p1">](https://github.com/dotnet/roslyn)</ept> - C# and Visual Basic compilers, used by most .NET platforms and tools.</source>
          <target state="new"><bpt id="p1">[</bpt>Roslyn<ept id="p1">](https://github.com/dotnet/roslyn)</ept> - C# and Visual Basic compilers, used by most .NET platforms and tools.</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Exposes APIs for reading, writing and analyzing source code.</source>
          <target state="new">Exposes APIs for reading, writing and analyzing source code.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>F#<ept id="p1">](https://github.com/microsoft/visualfsharp)</ept> - F# compiler.</source>
          <target state="new"><bpt id="p1">[</bpt>F#<ept id="p1">](https://github.com/microsoft/visualfsharp)</ept> - F# compiler.</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Xamarin SDK<ept id="p1">](http://open.xamarin.com)</ept> - Tools and libraries needed to write Android, iOS and macOS in C# and F#.</source>
          <target state="new"><bpt id="p1">[</bpt>Xamarin SDK<ept id="p1">](http://open.xamarin.com)</ept> - Tools and libraries needed to write Android, iOS and macOS in C# and F#.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Standardized</source>
          <target state="new">Standardized</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>.NET is specified via open <bpt id="p1">[</bpt>ECMA standards<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that outline its capabilities and that can be used to make a new implementation.</source>
          <target state="new">.NET is specified via open <bpt id="p1">[</bpt>ECMA standards<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/project-docs/dotnet-standards.md)</ept> that outline its capabilities and that can be used to make a new implementation.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>There are other .NET implementations, with Mono and Unity being the most popular beyond the Microsoft ones.</source>
          <target state="new">There are other .NET implementations, with Mono and Unity being the most popular beyond the Microsoft ones.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>