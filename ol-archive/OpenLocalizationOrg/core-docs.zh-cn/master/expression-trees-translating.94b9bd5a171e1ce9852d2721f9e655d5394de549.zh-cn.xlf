<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7b627909c2c6ec4729b20e7f4f4b9de44530a5e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-trees-translating.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb2991bdb9c44c349845c1804ff14fc7eb260354</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Translating Expression Trees</source>
          <target state="new">Translating Expression Trees</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Translating Expression Trees</source>
          <target state="new">Translating Expression Trees</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Translating Expression Trees</source>
          <target state="new">Translating Expression Trees</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Previous -- Building Expressions</source>
          <target state="new">Previous -- Building Expressions</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this final section, you'll learn how to visit each node in an expression tree, while building a modified copy of that expression tree.</source>
          <target state="new">In this final section, you'll learn how to visit each node in an expression tree, while building a modified copy of that expression tree.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These are the techniques that you will use in two important scenarios.</source>
          <target state="new">These are the techniques that you will use in two important scenarios.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first is to understand the algorithms expressed by an expression tree so that it can be translated into another environment.</source>
          <target state="new">The first is to understand the algorithms expressed by an expression tree so that it can be translated into another environment.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The second is when you want to change the algorithm that has been created.</source>
          <target state="new">The second is when you want to change the algorithm that has been created.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This might be to add logging, intercept method calls and track them, or other purposes.</source>
          <target state="new">This might be to add logging, intercept method calls and track them, or other purposes.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Translating is Visiting</source>
          <target state="new">Translating is Visiting</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The code you build to translate an expression tree is an extension of what you've already seen to visit all the nodes in a tree.</source>
          <target state="new">The code you build to translate an expression tree is an extension of what you've already seen to visit all the nodes in a tree.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you translate an expression tree, you visit all the nodes, and while visiting them, build the new tree.</source>
          <target state="new">When you translate an expression tree, you visit all the nodes, and while visiting them, build the new tree.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The new tree may contain references to the original nodes, or new nodes that you have placed in the tree.</source>
          <target state="new">The new tree may contain references to the original nodes, or new nodes that you have placed in the tree.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let's see this in action by visiting an expression tree, and creating a new tree with some replacement nodes.</source>
          <target state="new">Let's see this in action by visiting an expression tree, and creating a new tree with some replacement nodes.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this example, let's replace any constant with a constant that is ten times larger.</source>
          <target state="new">In this example, let's replace any constant with a constant that is ten times larger.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Otherwise, we'll leave the expression tree intact.</source>
          <target state="new">Otherwise, we'll leave the expression tree intact.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Rather than reading the value of the constant, and replacing it with a new constant, we'll make this replacement by replacing the constant node with a new node that performs the multiplication.</source>
          <target state="new">Rather than reading the value of the constant, and replacing it with a new constant, we'll make this replacement by replacing the constant node with a new node that performs the multiplication.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here, once you find a constant node, you create a new multiplication node whose children are the original constant, and the constant <ph id="ph1">`10`</ph>:</source>
          <target state="new">Here, once you find a constant node, you create a new multiplication node whose children are the original constant, and the constant <ph id="ph1">`10`</ph>:</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By replacing the original node with the substitute, a new tree is formed that contains our modifications.</source>
          <target state="new">By replacing the original node with the substitute, a new tree is formed that contains our modifications.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We can verify that by compiling and executing the replaced tree.</source>
          <target state="new">We can verify that by compiling and executing the replaced tree.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Building a new tree is a combination of visiting the nodes in the existing tree, and creating new nodes and inserting them into the tree.</source>
          <target state="new">Building a new tree is a combination of visiting the nodes in the existing tree, and creating new nodes and inserting them into the tree.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This example shows the importance of expression trees being immutable.</source>
          <target state="new">This example shows the importance of expression trees being immutable.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Notice that the new tree created above contains a mixture of newly created nodes, and nodes from the existing tree.</source>
          <target state="new">Notice that the new tree created above contains a mixture of newly created nodes, and nodes from the existing tree.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That's safe, because the nodes in the existing tree cannot be modified.</source>
          <target state="new">That's safe, because the nodes in the existing tree cannot be modified.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This can result in significant memory efficiencies.</source>
          <target state="new">This can result in significant memory efficiencies.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The same nodes can be used throughout a tree, or in multiple expression trees.</source>
          <target state="new">The same nodes can be used throughout a tree, or in multiple expression trees.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since nodes can't be modified, the same node can be reused whenever its needed.</source>
          <target state="new">Since nodes can't be modified, the same node can be reused whenever its needed.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Traversing and Executing an Addition</source>
          <target state="new">Traversing and Executing an Addition</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Let's verify this by building a second visitor that walks the tree of addition nodes and computes the result.</source>
          <target state="new">Let's verify this by building a second visitor that walks the tree of addition nodes and computes the result.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can do this by making a couple modifications to the vistor that you've seen so far.</source>
          <target state="new">You can do this by making a couple modifications to the vistor that you've seen so far.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this new version, the visitor will return the partial sum of the addition operation up to this point.</source>
          <target state="new">In this new version, the visitor will return the partial sum of the addition operation up to this point.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For a constant expression, that is simply the value of the constant expression.</source>
          <target state="new">For a constant expression, that is simply the value of the constant expression.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For an addition expression, the result is the sum of the left and right operands, once those trees have been traversed.</source>
          <target state="new">For an addition expression, the result is the sum of the left and right operands, once those trees have been traversed.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>There's quite a bit of code here, but the concepts are very approachable.</source>
          <target state="new">There's quite a bit of code here, but the concepts are very approachable.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This code visits children in a depth first search.</source>
          <target state="new">This code visits children in a depth first search.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When it encounters a constant node, the visitor returns the value of the constant.</source>
          <target state="new">When it encounters a constant node, the visitor returns the value of the constant.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After the visitor has visited both children, those children will have computed the sum computed for that sub-tree.</source>
          <target state="new">After the visitor has visited both children, those children will have computed the sum computed for that sub-tree.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The addition node can now compute its sum.</source>
          <target state="new">The addition node can now compute its sum.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Once all the nodes in the expression tree have been visited, the sum will have been computed.</source>
          <target state="new">Once all the nodes in the expression tree have been visited, the sum will have been computed.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can trace the execution by running the sample in the debugger and tracing the execution.</source>
          <target state="new">You can trace the execution by running the sample in the debugger and tracing the execution.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Let's make it easier to trace how the nodes are analyzed and how the sum is computed by travsersing the tree.</source>
          <target state="new">Let's make it easier to trace how the nodes are analyzed and how the sum is computed by travsersing the tree.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here's an updated version of the Aggregate method that includes quite a bit of tracing information:</source>
          <target state="new">Here's an updated version of the Aggregate method that includes quite a bit of tracing information:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Running it on the same expression yields the following output:</source>
          <target state="new">Running it on the same expression yields the following output:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Trace the output and follow along in the code above.</source>
          <target state="new">Trace the output and follow along in the code above.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You should be able to work out how the code visits each node and computes the sum as it goes through the tree and finds the sum.</source>
          <target state="new">You should be able to work out how the code visits each node and computes the sum as it goes through the tree and finds the sum.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Now, let's look at a different run, with the expression given by <ph id="ph1">`sum1`</ph>:</source>
          <target state="new">Now, let's look at a different run, with the expression given by <ph id="ph1">`sum1`</ph>:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here's the output from examining this expression:</source>
          <target state="new">Here's the output from examining this expression:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>While the final answer is the same, the tree traversal is completely different.</source>
          <target state="new">While the final answer is the same, the tree traversal is completely different.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The nodes are traveled in a different order, because the tree was constructed with different operations occurring first.</source>
          <target state="new">The nodes are traveled in a different order, because the tree was constructed with different operations occurring first.</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Learning More</source>
          <target state="new">Learning More</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This sample shows a small subset of the code you would build to traverse and interpret the algorithms represented by an expression tree.</source>
          <target state="new">This sample shows a small subset of the code you would build to traverse and interpret the algorithms represented by an expression tree.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a complete discussion of all the work necessary to build a general purpose library that translates expression trees into another language, please read <bpt id="p1">[</bpt>this series<ept id="p1">](http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx)</ept> by Matt Warren.</source>
          <target state="new">For a complete discussion of all the work necessary to build a general purpose library that translates expression trees into another language, please read <bpt id="p1">[</bpt>this series<ept id="p1">](http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx)</ept> by Matt Warren.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It goes into great detail on how to translate any of the code you might find in an expression tree.</source>
          <target state="new">It goes into great detail on how to translate any of the code you might find in an expression tree.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>I hope you've now seen the true power of expression trees.</source>
          <target state="new">I hope you've now seen the true power of expression trees.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can examine a set of code, make any changes you'd like to that code, and execute the changed version.</source>
          <target state="new">You can examine a set of code, make any changes you'd like to that code, and execute the changed version.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Because the expression trees are immutable, you can create new trees by using the components of existing trees.</source>
          <target state="new">Because the expression trees are immutable, you can create new trees by using the components of existing trees.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This minimizes the amount of memory needed to create modified expression trees.</source>
          <target state="new">This minimizes the amount of memory needed to create modified expression trees.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Next -- Summing up</source>
          <target state="new">Next -- Summing up</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>