<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de43ff34320a4bb6781a26eada96053d720345ab</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edca2d888e03121f8e3397757e5f54913ad895d2</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Handling and throwing exceptions in .NET</source>
          <target state="new">Handling and throwing exceptions in .NET</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Understand how to use exceptions in .NET</source>
          <target state="new">Understand how to use exceptions in .NET</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Handling and throwing exceptions in .NET</source>
          <target state="new">Handling and throwing exceptions in .NET</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Applications must be able to handle errors that occur during execution in a consistent manner.</source>
          <target state="new">Applications must be able to handle errors that occur during execution in a consistent manner.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET provides a model for notifying applications of errors in a uniform way: .NET operations indicate failure by throwing exceptions.</source>
          <target state="new">.NET provides a model for notifying applications of errors in a uniform way: .NET operations indicate failure by throwing exceptions.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="new">Exceptions</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An exception is any error condition or unexpected behavior that is encountered by an executing program.</source>
          <target state="new">An exception is any error condition or unexpected behavior that is encountered by an executing program.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Exceptions can be thrown because of a fault in your code or in code that you call (such as a shared library), unavailable operating system resources, unexpected conditions that the runtime encounters (such as code that cannot be verified), and so on.</source>
          <target state="new">Exceptions can be thrown because of a fault in your code or in code that you call (such as a shared library), unavailable operating system resources, unexpected conditions that the runtime encounters (such as code that cannot be verified), and so on.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Your application can recover from some of these conditions, but not from others.</source>
          <target state="new">Your application can recover from some of these conditions, but not from others.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although you can recover from most application exceptions, you cannot recover from most runtime exceptions.</source>
          <target state="new">Although you can recover from most application exceptions, you cannot recover from most runtime exceptions.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In .NET, an exception is an object that inherits from the <bpt id="p1">[</bpt>System.Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class.</source>
          <target state="new">In .NET, an exception is an object that inherits from the <bpt id="p1">[</bpt>System.Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An exception is thrown from an area of code where a problem has occurred.</source>
          <target state="new">An exception is thrown from an area of code where a problem has occurred.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The exception is passed up the stack until the application handles it or the program terminates.</source>
          <target state="new">The exception is passed up the stack until the application handles it or the program terminates.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exceptions vs. traditional error-handling methods</source>
          <target state="new">Exceptions vs. traditional error-handling methods</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Traditionally, a language's error-handling model relied on either the language's unique way of detecting errors and locating handlers for them, or on the error-handling mechanism provided by the operating system.</source>
          <target state="new">Traditionally, a language's error-handling model relied on either the language's unique way of detecting errors and locating handlers for them, or on the error-handling mechanism provided by the operating system.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The way .NET implements exception handling provides the following advantages:</source>
          <target state="new">The way .NET implements exception handling provides the following advantages:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Exception throwing and handling works the same for .NET programming languages.</source>
          <target state="new">Exception throwing and handling works the same for .NET programming languages.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Does not require any particular language syntax for handling exceptions, but allows each language to define its own syntax.</source>
          <target state="new">Does not require any particular language syntax for handling exceptions, but allows each language to define its own syntax.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Exceptions can be thrown across process and even machine boundaries.</source>
          <target state="new">Exceptions can be thrown across process and even machine boundaries.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Exception-handling code can be added to an application to increase program reliability.</source>
          <target state="new">Exception-handling code can be added to an application to increase program reliability.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Exceptions offer advantages over other methods of error notification, such as return codes.</source>
          <target state="new">Exceptions offer advantages over other methods of error notification, such as return codes.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Failures do not go unnoticed because if an exception is thrown and you don't handle it, the runtime terminates your application.</source>
          <target state="new">Failures do not go unnoticed because if an exception is thrown and you don't handle it, the runtime terminates your application.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Invalid values do not continue to propagate through the system as a result of code that fails to check for a failure return code.</source>
          <target state="new">Invalid values do not continue to propagate through the system as a result of code that fails to check for a failure return code.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Exception class and properties</source>
          <target state="new">Exception class and properties</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class is the base class from which exceptions inherit.</source>
          <target state="new">The <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class is the base class from which exceptions inherit.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.InvalidCastException)</ept> class hierarchy is as follows:</source>
          <target state="new">For example, the <bpt id="p1">[</bpt>InvalidCastException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.InvalidCastException)</ept> class hierarchy is as follows:</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> class has the following properties that help make understanding an exception easier.</source>
          <target state="new">The <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> class has the following properties that help make understanding an exception easier.</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Property Name</source>
          <target state="new">Property Name</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="new">Data</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> that holds arbitrary data in key-value pairs.</source>
          <target state="new">An <bpt id="p1">[</bpt>IDictionary<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> that holds arbitrary data in key-value pairs.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>HelpLink</source>
          <target state="new">HelpLink</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Can hold a URL (or URN) to a help file that provides extensive information about the cause of an exception.</source>
          <target state="new">Can hold a URL (or URN) to a help file that provides extensive information about the cause of an exception.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>InnerException</source>
          <target state="new">InnerException</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This property can be used to create and preserve a series of exceptions during exception handling.</source>
          <target state="new">This property can be used to create and preserve a series of exceptions during exception handling.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use it to create a new exception that contains previously caught exceptions.</source>
          <target state="new">You can use it to create a new exception that contains previously caught exceptions.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The original exception can be captured by the second exception in the <bpt id="p1">**</bpt>InnerException<ept id="p1">**</ept> property, allowing code that handles the second exception to examine the additional information.</source>
          <target state="new">The original exception can be captured by the second exception in the <bpt id="p1">**</bpt>InnerException<ept id="p1">**</ept> property, allowing code that handles the second exception to examine the additional information.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a method that receives an argument that's improperly formatted.</source>
          <target state="new">For example, suppose you have a method that receives an argument that's improperly formatted.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The code tries to read the argument, but an exception is thrown.</source>
          <target state="new">The code tries to read the argument, but an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The method catches the exception and throws a <bpt id="p1">[</bpt>FormatException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.FormatException)</ept>.</source>
          <target state="new">The method catches the exception and throws a <bpt id="p1">[</bpt>FormatException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.FormatException)</ept>.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To improve the caller's ability to determine the reason an exception is thrown, it is sometimes desirable for a method to catch an exception thrown by a helper routine and then throw an exception more indicative of the error that has occurred.</source>
          <target state="new">To improve the caller's ability to determine the reason an exception is thrown, it is sometimes desirable for a method to catch an exception thrown by a helper routine and then throw an exception more indicative of the error that has occurred.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A new and more meaningful exception can be created, where the inner exception reference can be set to the original exception.</source>
          <target state="new">A new and more meaningful exception can be created, where the inner exception reference can be set to the original exception.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This more meaningful exception can then be thrown to the caller.</source>
          <target state="new">This more meaningful exception can then be thrown to the caller.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that with this functionality, you can create a series of linked exceptions that ends with the exception that was thrown first.</source>
          <target state="new">Note that with this functionality, you can create a series of linked exceptions that ends with the exception that was thrown first.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Message</source>
          <target state="new">Message</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Provides details about the cause of an exception.</source>
          <target state="new">Provides details about the cause of an exception.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Source</source>
          <target state="new">Source</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the application or the object that causes the error.</source>
          <target state="new">Gets or sets the name of the application or the object that causes the error.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>StackTrace</source>
          <target state="new">StackTrace</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Contains a stack trace that can be used to determine where an error occurred.</source>
          <target state="new">Contains a stack trace that can be used to determine where an error occurred.</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The stack trace includes the source file name and program line number if debugging information is available.</source>
          <target state="new">The stack trace includes the source file name and program line number if debugging information is available.</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Most of the classes that inherit from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> do not implement additional members or provide additional functionality; they simply inherit from <bpt id="p2">**</bpt>Exception<ept id="p2">**</ept>.</source>
          <target state="new">Most of the classes that inherit from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> do not implement additional members or provide additional functionality; they simply inherit from <bpt id="p2">**</bpt>Exception<ept id="p2">**</ept>.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Therefore, the most important information for an exception can be found in the hierarchy of exception classes, the exception name, and the information contained in the exception.</source>
          <target state="new">Therefore, the most important information for an exception can be found in the hierarchy of exception classes, the exception name, and the information contained in the exception.</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is recommended to throw and catch only objects that derive from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>, but you can throw any object that derives from the <bpt id="p2">[</bpt>Object<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Object)</ept> class as an exception.</source>
          <target state="new">It is recommended to throw and catch only objects that derive from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>, but you can throw any object that derives from the <bpt id="p2">[</bpt>Object<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Object)</ept> class as an exception.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that not all languages support throwing and catching objects that do not derive from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>.</source>
          <target state="new">Note that not all languages support throwing and catching objects that do not derive from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Common Exceptions</source>
          <target state="new">Common Exceptions</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following table lists some common exceptions with examples of what can cause them.</source>
          <target state="new">The following table lists some common exceptions with examples of what can cause them.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Exception type</source>
          <target state="new">Exception type</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Base type</source>
          <target state="new">Base type</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new">Description</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="new">Example</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Base class for all exceptions.</source>
          <target state="new">Base class for all exceptions.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>None (use a derived class of this exception).</source>
          <target state="new">None (use a derived class of this exception).</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>IndexOutOfRangeException</source>
          <target state="new">IndexOutOfRangeException</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Thrown by the runtime only when an array is indexed improperly.</source>
          <target state="new">Thrown by the runtime only when an array is indexed improperly.</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Indexing an array outside its valid range:</source>
          <target state="new">Indexing an array outside its valid range:</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>NullReferenceException</source>
          <target state="new">NullReferenceException</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Thrown by the runtime only when a null object is referenced.</source>
          <target state="new">Thrown by the runtime only when a null object is referenced.</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>InvalidOperationException</source>
          <target state="new">InvalidOperationException</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Thrown by methods when in an invalid state.</source>
          <target state="new">Thrown by methods when in an invalid state.</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`Enumerator.GetNext()`</ph> after removing an Item from the underlying collection.</source>
          <target state="new">Calling <ph id="ph1">`Enumerator.GetNext()`</ph> after removing an Item from the underlying collection.</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ArgumentException</source>
          <target state="new">ArgumentException</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Base class for all argument exceptions.</source>
          <target state="new">Base class for all argument exceptions.</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>None (use a derived class of this exception).</source>
          <target state="new">None (use a derived class of this exception).</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>ArgumentNullException</source>
          <target state="new">ArgumentNullException</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Thrown by methods that do not allow an argument to be null.</source>
          <target state="new">Thrown by methods that do not allow an argument to be null.</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>ArgumentOutOfRangeException</source>
          <target state="new">ArgumentOutOfRangeException</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="new">Exception</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Thrown by methods that verify that arguments are in a given range.</source>
          <target state="new">Thrown by methods that verify that arguments are in a given range.</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>How to use the try/catch block to catch exceptions</source>
          <target state="new">How to use the try/catch block to catch exceptions</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Place the sections of code that might throw exceptions in a <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block and place code that handles exceptions in a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</source>
          <target state="new">Place the sections of code that might throw exceptions in a <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block and place code that handles exceptions in a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block.</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block is a series of statements beginning with the keyword <bpt id="p2">**</bpt>catch<ept id="p2">**</ept>, followed by an exception type and an action to be taken.</source>
          <target state="new">The <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block is a series of statements beginning with the keyword <bpt id="p2">**</bpt>catch<ept id="p2">**</ept>, followed by an exception type and an action to be taken.</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch a possible exception.</source>
          <target state="new">The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch a possible exception.</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method contains a <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block with a <bpt id="p2">[</bpt>StreamReader<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.IO.StreamReader)</ept> statement that opens a data file called <ph id="ph2">`data.txt`</ph> and writes a string from the file.</source>
          <target state="new">The <ph id="ph1">`Main`</ph> method contains a <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block with a <bpt id="p2">[</bpt>StreamReader<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.IO.StreamReader)</ept> statement that opens a data file called <ph id="ph2">`data.txt`</ph> and writes a string from the file.</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Following the <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block is a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block that catches any exception that results from the <bpt id="p3">**</bpt>try<ept id="p3">**</ept> block.</source>
          <target state="new">Following the <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block is a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block that catches any exception that results from the <bpt id="p3">**</bpt>try<ept id="p3">**</ept> block.</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The common language runtime catches exceptions that are not caught by a catch block.</source>
          <target state="new">The common language runtime catches exceptions that are not caught by a catch block.</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Depending on how the runtime is configured, a debug dialog box appears, or the program stops executing and a dialog box with exception information appears, or an error is printed out to STDERR.</source>
          <target state="new">Depending on how the runtime is configured, a debug dialog box appears, or the program stops executing and a dialog box with exception information appears, or an error is printed out to STDERR.</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Almost any line of code can cause an exception, particularly exceptions that are thrown by the common language runtime itself, such as <bpt id="p1">[</bpt>OutOfMemoryException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.OutOfMemoryException)</ept>.</source>
          <target state="new">Almost any line of code can cause an exception, particularly exceptions that are thrown by the common language runtime itself, such as <bpt id="p1">[</bpt>OutOfMemoryException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.OutOfMemoryException)</ept>.</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Most applications don't have to deal with these exceptions, but you should be aware of this possibility when writing libraries to be used by others.</source>
          <target state="new">Most applications don't have to deal with these exceptions, but you should be aware of this possibility when writing libraries to be used by others.</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For suggestions on when to set code in a Try block, see <bpt id="p1">[</bpt>Best Practices for Exceptions<ept id="p1">](#best-practices-for-exceptions)</ept>.</source>
          <target state="new">For suggestions on when to set code in a Try block, see <bpt id="p1">[</bpt>Best Practices for Exceptions<ept id="p1">](#best-practices-for-exceptions)</ept>.</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>How to use specific exceptions in a Catch block</source>
          <target state="new">How to use specific exceptions in a Catch block</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The preceding code example illustrates a basic <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement that catches any exception.</source>
          <target state="new">The preceding code example illustrates a basic <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement that catches any exception.</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In general, though, it's good programming practice to catch a specific type of exception rather than use a basic <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement.</source>
          <target state="new">In general, though, it's good programming practice to catch a specific type of exception rather than use a basic <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement.</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When an exception occurs, it is passed up the stack and each catch block is given the opportunity to handle it.</source>
          <target state="new">When an exception occurs, it is passed up the stack and each catch block is given the opportunity to handle it.</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The order of catch statements is important.</source>
          <target state="new">The order of catch statements is important.</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Put catch blocks targeted to specific exceptions before a general exception catch block or the compiler might issue an error.</source>
          <target state="new">Put catch blocks targeted to specific exceptions before a general exception catch block or the compiler might issue an error.</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The proper catch block is determined by matching the type of the exception to the name of the exception specified in the catch block.</source>
          <target state="new">The proper catch block is determined by matching the type of the exception to the name of the exception specified in the catch block.</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If there is no specific catch block, the exception is caught by a general catch block, if one exists.</source>
          <target state="new">If there is no specific catch block, the exception is caught by a general catch block, if one exists.</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch an <bpt id="p3">[</bpt>InvalidCastException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.InvalidCastException)</ept>.</source>
          <target state="new">The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch an <bpt id="p3">[</bpt>InvalidCastException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.InvalidCastException)</ept>.</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The sample creates a class called <ph id="ph1">`Employee`</ph> with a single property, employee level (<ph id="ph2">`Emlevel`</ph>).</source>
          <target state="new">The sample creates a class called <ph id="ph1">`Employee`</ph> with a single property, employee level (<ph id="ph2">`Emlevel`</ph>).</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A method, <ph id="ph1">`PromoteEmployee`</ph>, takes an object and increments the employee level.</source>
          <target state="new">A method, <ph id="ph1">`PromoteEmployee`</ph>, takes an object and increments the employee level.</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>InvalidCastException<ept id="p1">**</ept> occurs when a <bpt id="p2">[</bpt>DateTime<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.DateTime)</ept> instance is passed to the <ph id="ph1">`PromoteEmployee`</ph> method.</source>
          <target state="new">An <bpt id="p1">**</bpt>InvalidCastException<ept id="p1">**</ept> occurs when a <bpt id="p2">[</bpt>DateTime<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.DateTime)</ept> instance is passed to the <ph id="ph1">`PromoteEmployee`</ph> method.</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>How to use finally blocks</source>
          <target state="new">How to use finally blocks</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When an exception occurs, execution stops and control is given to the appropriate exception handler.</source>
          <target state="new">When an exception occurs, execution stops and control is given to the appropriate exception handler.</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This often means that lines of code you expect to be executed are bypassed.</source>
          <target state="new">This often means that lines of code you expect to be executed are bypassed.</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Some resource cleanup, such as closing a file, needs to be done even if an exception is thrown.</source>
          <target state="new">Some resource cleanup, such as closing a file, needs to be done even if an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To do this, you can use a <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block.</source>
          <target state="new">To do this, you can use a <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block.</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block always executes, regardless of whether an exception is thrown.</source>
          <target state="new">A <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block always executes, regardless of whether an exception is thrown.</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch an <bpt id="p3">[</bpt>ArgumentOutOfRangeException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentOutOfRangeException)</ept>.</source>
          <target state="new">The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch an <bpt id="p3">[</bpt>ArgumentOutOfRangeException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentOutOfRangeException)</ept>.</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method creates two arrays and attempts to copy one to the other.</source>
          <target state="new">The <ph id="ph1">`Main`</ph> method creates two arrays and attempts to copy one to the other.</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The action generates an <bpt id="p1">**</bpt>ArgumentOutOfRangeException<ept id="p1">**</ept> and the error is written to the console.</source>
          <target state="new">The action generates an <bpt id="p1">**</bpt>ArgumentOutOfRangeException<ept id="p1">**</ept> and the error is written to the console.</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block executes regardless of the outcome of the copy action.</source>
          <target state="new">The <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block executes regardless of the outcome of the copy action.</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>How to explicitly throw exceptions</source>
          <target state="new">How to explicitly throw exceptions</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can explicitly throw an exception using the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement.</source>
          <target state="new">You can explicitly throw an exception using the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement.</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can also throw a caught exception again using the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement.</source>
          <target state="new">You can also throw a caught exception again using the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement.</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It is good coding practice to add information to an exception that is re-thrown to provide more information when debugging.</source>
          <target state="new">It is good coding practice to add information to an exception that is re-thrown to provide more information when debugging.</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch a possible <bpt id="p3">[</bpt>FileNotFoundException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept>.</source>
          <target state="new">The following code example uses a <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block to catch a possible <bpt id="p3">[</bpt>FileNotFoundException<ept id="p3">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept>.</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Following the <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block is a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block that catches the <bpt id="p3">**</bpt>FileNotFoundException<ept id="p3">**</ept> and writes a message to the console if the data file is not found.</source>
          <target state="new">Following the <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block is a <bpt id="p2">**</bpt>catch<ept id="p2">**</ept> block that catches the <bpt id="p3">**</bpt>FileNotFoundException<ept id="p3">**</ept> and writes a message to the console if the data file is not found.</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The next statement is the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement that throws a new <bpt id="p2">**</bpt>FileNotFoundException<ept id="p2">**</ept> and adds text information to the exception.</source>
          <target state="new">The next statement is the <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> statement that throws a new <bpt id="p2">**</bpt>FileNotFoundException<ept id="p2">**</ept> and adds text information to the exception.</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>How to create user-defined exceptions</source>
          <target state="new">How to create user-defined exceptions</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>.NET provides a hierarchy of exception classes ultimately derived from the base class <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept>.</source>
          <target state="new">.NET provides a hierarchy of exception classes ultimately derived from the base class <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept>.</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> class.</source>
          <target state="new">However, if none of the predefined exceptions meets your needs, you can create your own exception classes by deriving from the <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When creating your own exceptions, end the class name of the user-defined exception with the word "Exception," and implement the three common constructors, as shown in the following example.</source>
          <target state="new">When creating your own exceptions, end the class name of the user-defined exception with the word "Exception," and implement the three common constructors, as shown in the following example.</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The example defines a new exception class named <ph id="ph1">`EmployeeListNotFoundException`</ph>.</source>
          <target state="new">The example defines a new exception class named <ph id="ph1">`EmployeeListNotFoundException`</ph>.</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The class is derived from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> and includes three constructors.</source>
          <target state="new">The class is derived from <bpt id="p1">**</bpt>Exception<ept id="p1">**</ept> and includes three constructors.</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller).</source>
          <target state="new">In situations where you are using remoting, you must ensure that the metadata for any user-defined exceptions is available at the server (callee) and to the client (the proxy object or caller).</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Best practices for exceptions<ept id="p1">](#best-practices-for-exceptions)</ept>.</source>
          <target state="new">For more information, see <bpt id="p1">[</bpt>Best practices for exceptions<ept id="p1">](#best-practices-for-exceptions)</ept>.</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Best practices for exceptions</source>
          <target state="new">Best practices for exceptions</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>A well-designed app handles exceptions and errors to prevent app crashes.</source>
          <target state="new">A well-designed app handles exceptions and errors to prevent app crashes.</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This section describes best practices for handling and creating exceptions.</source>
          <target state="new">This section describes best practices for handling and creating exceptions.</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Use try/catch/finally blocks</source>
          <target state="new">Use try/catch/finally blocks</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept><ph id="ph2">/</ph><bpt id="p3">**</bpt>finally<ept id="p3">**</ept> blocks around code that can potentially generate an exception.</source>
          <target state="new">Use <bpt id="p1">**</bpt>try<ept id="p1">**</ept><ph id="ph1">/</ph><bpt id="p2">**</bpt>catch<ept id="p2">**</ept><ph id="ph2">/</ph><bpt id="p3">**</bpt>finally<ept id="p3">**</ept> blocks around code that can potentially generate an exception.</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> blocks, always order exceptions from the most specific to the least specific.</source>
          <target state="new">In <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> blocks, always order exceptions from the most specific to the least specific.</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Use a <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block to clean up resources, whether you can recover or not.</source>
          <target state="new">Use a <bpt id="p1">**</bpt>finally<ept id="p1">**</ept> block to clean up resources, whether you can recover or not.</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Handle common conditions without throwing exceptions</source>
          <target state="new">Handle common conditions without throwing exceptions</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>For conditions that are likely to occur but might trigger an exception, consider handling them in a way that will avoid the exception.</source>
          <target state="new">For conditions that are likely to occur but might trigger an exception, consider handling them in a way that will avoid the exception.</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>For example, if you try to close a connection that is already closed, you'll get an <ph id="ph1">`InvalidOperationException`</ph>.</source>
          <target state="new">For example, if you try to close a connection that is already closed, you'll get an <ph id="ph1">`InvalidOperationException`</ph>.</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can avoid that by using an <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement to check the connection state before trying to close it.</source>
          <target state="new">You can avoid that by using an <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement to check the connection state before trying to close it.</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you don't check connection state before closing, you can catch the <ph id="ph1">`InvalidOperationException`</ph> exception.</source>
          <target state="new">If you don't check connection state before closing, you can catch the <ph id="ph1">`InvalidOperationException`</ph> exception.</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The method to choose depends on how often you expect the event to occur.</source>
          <target state="new">The method to choose depends on how often you expect the event to occur.</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Use exception handling if the event doesn't occur very often, that is, if the event is truly exceptional and indicates an error (such as an unexpected end-of-file).</source>
          <target state="new">Use exception handling if the event doesn't occur very often, that is, if the event is truly exceptional and indicates an error (such as an unexpected end-of-file).</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When you use exception handling, less code is executed in normal conditions.</source>
          <target state="new">When you use exception handling, less code is executed in normal conditions.</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Check for error conditions in code if the event happens routinely and could be considered part of normal execution.</source>
          <target state="new">Check for error conditions in code if the event happens routinely and could be considered part of normal execution.</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>When you check for common error conditions, less code is executed because you avoid exceptions.</source>
          <target state="new">When you check for common error conditions, less code is executed because you avoid exceptions.</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Design classes so that exceptions can be avoided</source>
          <target state="new">Design classes so that exceptions can be avoided</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A class can provide methods or properties that enable you to avoid making a call that would trigger an exception.</source>
          <target state="new">A class can provide methods or properties that enable you to avoid making a call that would trigger an exception.</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>FileStream<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileStream)</ept> class provides methods that help determine whether the end of the file has been reached.</source>
          <target state="new">For example, a <bpt id="p1">[</bpt>FileStream<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileStream)</ept> class provides methods that help determine whether the end of the file has been reached.</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>These can be used to avoid the exception that is thrown if you read past the end of the file.</source>
          <target state="new">These can be used to avoid the exception that is thrown if you read past the end of the file.</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The following example shows how to read to the end of a file without triggering an exception.</source>
          <target state="new">The following example shows how to read to the end of a file without triggering an exception.</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Another way to avoid exceptions is to return null for extremely common error cases instead of throwing an exception.</source>
          <target state="new">Another way to avoid exceptions is to return null for extremely common error cases instead of throwing an exception.</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>An extremely common error case can be considered normal flow of control.</source>
          <target state="new">An extremely common error case can be considered normal flow of control.</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>By returning null in these cases, you minimize the performance impact to an app.</source>
          <target state="new">By returning null in these cases, you minimize the performance impact to an app.</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Throw exceptions instead of returning an error code</source>
          <target state="new">Throw exceptions instead of returning an error code</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Exceptions ensure that failures do not go unnoticed because calling code didn't check a return code.</source>
          <target state="new">Exceptions ensure that failures do not go unnoticed because calling code didn't check a return code.</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Use the predefined .NET exception types</source>
          <target state="new">Use the predefined .NET exception types</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Introduce a new exception class only when a predefined one doesn't apply.</source>
          <target state="new">Introduce a new exception class only when a predefined one doesn't apply.</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Throw an <bpt id="p1">[</bpt>InvalidOperationException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.InvalidOperationException)</ept> exception if a property set or method call is not appropriate given the object's current state.</source>
          <target state="new">Throw an <bpt id="p1">[</bpt>InvalidOperationException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.InvalidOperationException)</ept> exception if a property set or method call is not appropriate given the object's current state.</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Throw an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept> exception or one of the predefined classes that derive from <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept> if invalid parameters are passed.</source>
          <target state="new">Throw an <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept> exception or one of the predefined classes that derive from <bpt id="p2">[</bpt>ArgumentException<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept> if invalid parameters are passed.</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>End exception class names with the word "Exception"</source>
          <target state="new">End exception class names with the word "Exception"</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>When a custom exception is necessary, name it appropriately and derive it from the <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class.</source>
          <target state="new">When a custom exception is necessary, name it appropriately and derive it from the <bpt id="p1">[</bpt>Exception<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception)</ept> class.</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Include three constructors in custom exception classes</source>
          <target state="new">Include three constructors in custom exception classes</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Use at least the three common constructors when creating your own exception classes: the default constructor, a constructor that takes a string message, and a constructor that takes a string message and an inner exception.</source>
          <target state="new">Use at least the three common constructors when creating your own exception classes: the default constructor, a constructor that takes a string message, and a constructor that takes a string message and an inner exception.</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception()<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor)</ept>, which uses default values.</source>
          <target state="new"><bpt id="p1">[</bpt>Exception()<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor)</ept>, which uses default values.</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception(String)<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor_System_String_)</ept>, which accepts a string message.</source>
          <target state="new"><bpt id="p1">[</bpt>Exception(String)<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor_System_String_)</ept>, which accepts a string message.</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception(String, Exception)<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor_System_String_System_Exception_)</ept>, which accepts a string message and an inner exception.</source>
          <target state="new"><bpt id="p1">[</bpt>Exception(String, Exception)<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception__ctor_System_String_System_Exception_)</ept>, which accepts a string message and an inner exception.</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create User-Defined Exceptions<ept id="p1">](#how-to-create-user-defined-exceptions)</ept>.</source>
          <target state="new">For an example, see <bpt id="p1">[</bpt>How to: Create User-Defined Exceptions<ept id="p1">](#how-to-create-user-defined-exceptions)</ept>.</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Ensure that exception data is available when code executes remotely</source>
          <target state="new">Ensure that exception data is available when code executes remotely</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When you create user-defined exceptions, ensure that the metadata for the exceptions is available to code that is executing remotely.</source>
          <target state="new">When you create user-defined exceptions, ensure that the metadata for the exceptions is available to code that is executing remotely.</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For example, on .NET runtimes that implement App Domains, exceptions may occur across App domains.</source>
          <target state="new">For example, on .NET runtimes that implement App Domains, exceptions may occur across App domains.</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Suppose App Domain A creates App Domain B, which executes code that throws an exception.</source>
          <target state="new">Suppose App Domain A creates App Domain B, which executes code that throws an exception.</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For App Domain A to properly catch and handle the exception, it must be able to find the assembly that contains the exception thrown by App Domain B. If App Domain B throws an exception that is contained in an assembly under its application base, but not under App Domain A's application base, App Domain A will not be able to find the exception, and the common language runtime will throw a <bpt id="p1">[</bpt>FileNotFoundException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept> exception.</source>
          <target state="new">For App Domain A to properly catch and handle the exception, it must be able to find the assembly that contains the exception thrown by App Domain B. If App Domain B throws an exception that is contained in an assembly under its application base, but not under App Domain A's application base, App Domain A will not be able to find the exception, and the common language runtime will throw a <bpt id="p1">[</bpt>FileNotFoundException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept> exception.</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>To avoid this situation, you can deploy the assembly that contains the exception information in two ways:</source>
          <target state="new">To avoid this situation, you can deploy the assembly that contains the exception information in two ways:</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Put the assembly into a common application base shared by both app domains.</source>
          <target state="new">Put the assembly into a common application base shared by both app domains.</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>or -</source>
          <target state="new">or -</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>If the domains do not share a common application base, sign the assembly that contains the exception information with a strong name and deploy the assembly into the global assembly cache.</source>
          <target state="new">If the domains do not share a common application base, sign the assembly that contains the exception information with a strong name and deploy the assembly into the global assembly cache.</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Include a localized description string in every exception</source>
          <target state="new">Include a localized description string in every exception</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The error message that the user sees is derived from the description string of the exception that was thrown, and not from the name of the exception class.</source>
          <target state="new">The error message that the user sees is derived from the description string of the exception that was thrown, and not from the name of the exception class.</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Use grammatically correct error messages</source>
          <target state="new">Use grammatically correct error messages</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Write clear sentences and include ending punctuation.</source>
          <target state="new">Write clear sentences and include ending punctuation.</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Each sentence in a description string of an exception should end in a period.</source>
          <target state="new">Each sentence in a description string of an exception should end in a period.</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For example, "The log table has overflowed.”</source>
          <target state="new">For example, "The log table has overflowed.”</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>would be an appropriate description string.</source>
          <target state="new">would be an appropriate description string.</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In custom exceptions, provide additional properties as needed</source>
          <target state="new">In custom exceptions, provide additional properties as needed</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Provide additional properties for an exception (in addition to the description string) only when there's a programmatic scenario where the additional information is useful.</source>
          <target state="new">Provide additional properties for an exception (in addition to the description string) only when there's a programmatic scenario where the additional information is useful.</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>FileNotFoundException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept> provides the <bpt id="p2">[</bpt>FileName<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException#System_IO_FileNotFoundException_FileName)</ept> property.</source>
          <target state="new">For example, the <bpt id="p1">[</bpt>FileNotFoundException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException)</ept> provides the <bpt id="p2">[</bpt>FileName<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.IO.FileNotFoundException#System_IO_FileNotFoundException_FileName)</ept> property.</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Place throw statements so that the stack trace will be helpful</source>
          <target state="new">Place throw statements so that the stack trace will be helpful</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The stack trace begins at the statement where the exception is thrown and ends at the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement that catches the exception.</source>
          <target state="new">The stack trace begins at the statement where the exception is thrown and ends at the <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> statement that catches the exception.</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Use exception builder methods</source>
          <target state="new">Use exception builder methods</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>It is common for a class to throw the same exception from different places in its implementation.</source>
          <target state="new">It is common for a class to throw the same exception from different places in its implementation.</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>To avoid excessive code, use helper methods that create the exception and return it.</source>
          <target state="new">To avoid excessive code, use helper methods that create the exception and return it.</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new">For example:</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In some cases, it's more appropriate to use the exception's constructor to build the exception.</source>
          <target state="new">In some cases, it's more appropriate to use the exception's constructor to build the exception.</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>An example is a global exception class such as <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept>,</source>
          <target state="new">An example is a global exception class such as <bpt id="p1">[</bpt>ArgumentException<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.ArgumentException)</ept>,</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Clean up intermediate results when throwing an exception</source>
          <target state="new">Clean up intermediate results when throwing an exception</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Callers should be able to assume that there are no side effects when an exception is thrown from a method.</source>
          <target state="new">Callers should be able to assume that there are no side effects when an exception is thrown from a method.</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>For example, if you have code that transfers money by withdrawing from one account and depositing in another account, and an exception is thrown while executing the deposit, you don't want the withdrawal to remain in effect.</source>
          <target state="new">For example, if you have code that transfers money by withdrawing from one account and depositing in another account, and an exception is thrown while executing the deposit, you don't want the withdrawal to remain in effect.</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>One way to handle this situation is to catch any exceptions thrown by the deposit transaction and roll back the withdrawal.</source>
          <target state="new">One way to handle this situation is to catch any exceptions thrown by the deposit transaction and roll back the withdrawal.</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This example illustrates the use of <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> to re-throw the original exception, which can make it easier for callers to see the real cause of the problem without having to examine the <bpt id="p2">[</bpt>InnerException<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception_InnerException)</ept> property.</source>
          <target state="new">This example illustrates the use of <bpt id="p1">**</bpt>throw<ept id="p1">**</ept> to re-throw the original exception, which can make it easier for callers to see the real cause of the problem without having to examine the <bpt id="p2">[</bpt>InnerException<ept id="p2">](https://docs.microsoft.com/dotnet/core/api/System.Exception#System_Exception_InnerException)</ept> property.</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>An alternative is to throw a new exception and include the original exception as the inner exception:</source>
          <target state="new">An alternative is to throw a new exception and include the original exception as the inner exception:</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="new">C</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="new">Next steps</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>To learn more about how exceptions work in .NET, see <bpt id="p1">[</bpt>What Every Dev needs to Know About Exceptions in the Runtime<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/exceptions.md)</ept>.</source>
          <target state="new">To learn more about how exceptions work in .NET, see <bpt id="p1">[</bpt>What Every Dev needs to Know About Exceptions in the Runtime<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/exceptions.md)</ept>.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>