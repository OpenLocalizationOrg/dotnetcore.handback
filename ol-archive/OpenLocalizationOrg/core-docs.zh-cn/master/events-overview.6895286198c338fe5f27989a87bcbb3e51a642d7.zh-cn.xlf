<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-442b6d0" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d31091b0bf4cab0f5be2f9ded4e9d49ebe620fe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\events-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d01f211284b1e8f1f06f79255eb368295faba9e</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Introduction to Events</source>
          <target state="new">Introduction to Events</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Events</source>
          <target state="new">Introduction to Events</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
          <target state="new">.NET, .NET Core</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Introduction to Events</source>
          <target state="new">Introduction to Events</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Previous</source>
          <target state="new">Previous</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Events are, like delegates, a <bpt id="p1">*</bpt>late binding<ept id="p1">*</ept> mechanism.</source>
          <target state="new">Events are, like delegates, a <bpt id="p1">*</bpt>late binding<ept id="p1">*</ept> mechanism.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In fact, events are built on the language support for delegates.</source>
          <target state="new">In fact, events are built on the language support for delegates.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Events are a way for an object to broadcast (to all interested components in the system) that something has happened.</source>
          <target state="new">Events are a way for an object to broadcast (to all interested components in the system) that something has happened.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any other component can subscribe to the event, and be notified when an event is raised.</source>
          <target state="new">Any other component can subscribe to the event, and be notified when an event is raised.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You've probably used events in some of your programming.</source>
          <target state="new">You've probably used events in some of your programming.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many graphical systems have an event model to report user interaction.</source>
          <target state="new">Many graphical systems have an event model to report user interaction.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These events would report mouse movement, button presses and similar interactions.</source>
          <target state="new">These events would report mouse movement, button presses and similar interactions.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>That's one of the most common, but certainly not the only scenario where events are used.</source>
          <target state="new">That's one of the most common, but certainly not the only scenario where events are used.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can define events that should be raised for your classes.</source>
          <target state="new">You can define events that should be raised for your classes.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One important consideration when working with events is that there may not be any object registered for a particular event.</source>
          <target state="new">One important consideration when working with events is that there may not be any object registered for a particular event.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must write your code so that it does not raise events when no listeners are configured.</source>
          <target state="new">You must write your code so that it does not raise events when no listeners are configured.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Subscribing to an event also creates a coupling between two objects (the event source, and the event sink).</source>
          <target state="new">Subscribing to an event also creates a coupling between two objects (the event source, and the event sink).</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You need to ensure that the event sink unsubscribes from the event source when no longer interested in events.</source>
          <target state="new">You need to ensure that the event sink unsubscribes from the event source when no longer interested in events.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Design Goals for Event Support</source>
          <target state="new">Design Goals for Event Support</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The language design for events targets these goals.</source>
          <target state="new">The language design for events targets these goals.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>First, enable very minimal coupling between an event source and an event sink.</source>
          <target state="new">First, enable very minimal coupling between an event source and an event sink.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These two components may not be written by the same organization, and may even be updated on totally different schedules.</source>
          <target state="new">These two components may not be written by the same organization, and may even be updated on totally different schedules.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Secondly, it should be very simple to subscribe to an event, and to unsubscribe from that same event.</source>
          <target state="new">Secondly, it should be very simple to subscribe to an event, and to unsubscribe from that same event.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>And finally, event sources should support multiple event subscribers.</source>
          <target state="new">And finally, event sources should support multiple event subscribers.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It should also support having no event subscribers attached.</source>
          <target state="new">It should also support having no event subscribers attached.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can see that the goals for events are very similar to the goals for delegates.</source>
          <target state="new">You can see that the goals for events are very similar to the goals for delegates.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>That's why the event language support is built on the delegate language support.</source>
          <target state="new">That's why the event language support is built on the delegate language support.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Language Support for Events</source>
          <target state="new">Language Support for Events</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The syntax for defining events, and subscribing or unsubscribing from events is an extension of the syntax for delegates.</source>
          <target state="new">The syntax for defining events, and subscribing or unsubscribing from events is an extension of the syntax for delegates.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To define an event you use the <ph id="ph1">`event`</ph> keyword:</source>
          <target state="new">To define an event you use the <ph id="ph1">`event`</ph> keyword:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The type of the event (<ph id="ph1">`EventHandler&lt;FileListArgs&gt;`</ph> in this example) must be a delegate type.</source>
          <target state="new">The type of the event (<ph id="ph1">`EventHandler&lt;FileListArgs&gt;`</ph> in this example) must be a delegate type.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are a number of conventions that you should follow when declaring an event.</source>
          <target state="new">There are a number of conventions that you should follow when declaring an event.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Typically, the event delegate type has a void return.</source>
          <target state="new">Typically, the event delegate type has a void return.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Prefix event declarations with 'On'.</source>
          <target state="new">Prefix event declarations with 'On'.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The remainder of the name is a verb.</source>
          <target state="new">The remainder of the name is a verb.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use past tense (as in this example) when the event reports something that has happened.</source>
          <target state="new">Use past tense (as in this example) when the event reports something that has happened.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use a present tense verb (for example, <ph id="ph1">`OnClosing`</ph>) to report something that is about to happen.</source>
          <target state="new">Use a present tense verb (for example, <ph id="ph1">`OnClosing`</ph>) to report something that is about to happen.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Often, using present tense indicates that the event supports cancellation.</source>
          <target state="new">Often, using present tense indicates that the event supports cancellation.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, an <ph id="ph1">`OnClosing`</ph> event may include an argument that would indicate if the close operation should continue, or not.</source>
          <target state="new">For example, an <ph id="ph1">`OnClosing`</ph> event may include an argument that would indicate if the close operation should continue, or not.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you want to raise the event, you call the event using the delegate invocation syntax:</source>
          <target state="new">When you want to raise the event, you call the event using the delegate invocation syntax:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As discussed in the section on <bpt id="p1">[</bpt>delegates<ept id="p1">](delegates-patterns.md)</ept>, the ?.</source>
          <target state="new">As discussed in the section on <bpt id="p1">[</bpt>delegates<ept id="p1">](delegates-patterns.md)</ept>, the ?.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>operator makes it easy to ensure that you do not attempt to raise the event when there are no subscribers to that event.</source>
          <target state="new">operator makes it easy to ensure that you do not attempt to raise the event when there are no subscribers to that event.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You subscribe to an event by using the <ph id="ph1">`+=`</ph> operator:</source>
          <target state="new">You subscribe to an event by using the <ph id="ph1">`+=`</ph> operator:</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You unsubscribe using the <ph id="ph1">`-=`</ph> operator:</source>
          <target state="new">You unsubscribe using the <ph id="ph1">`-=`</ph> operator:</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It's important to note that I declared a local variable for the expression that represents the event handler.</source>
          <target state="new">It's important to note that I declared a local variable for the expression that represents the event handler.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>That ensures the unsubscribe removes the handler.</source>
          <target state="new">That ensures the unsubscribe removes the handler.</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If, instead, you used the body of the lambda expression, you are attempting to remove a handler that has never been attached, which does nothing.</source>
          <target state="new">If, instead, you used the body of the lambda expression, you are attempting to remove a handler that has never been attached, which does nothing.</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the next article, you'll learn more about typical event patterns, and different variations on this example.</source>
          <target state="new">In the next article, you'll learn more about typical event patterns, and different variations on this example.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Next</source>
          <target state="new">Next</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>